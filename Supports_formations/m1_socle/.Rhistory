}
# essai de la fonction hors boucle
essai_2005 <- import (entree = fichier,
an = '2005')
# dans la boucle
for (i in as.character (seq (from = 2005, to = 2011, by = 2))) {
nom <- paste0 ("porte_a_porte_", i)
entree = paste0 ("U:/cscribe/sources/ademe/collecte/hors_deblais/type_collecte/porte_a_porte_",i,".xlsx")
assign(nom, import (entree = entree, an = i))
}
rm (list = ls())
library ("tidyverse")
library ("readxl")
library (assertr)
fichier <- paste0("U:/cscribe/sources/ademe/collecte/hors_deblais/type_collecte/porte_a_porte_",2005,".xlsx")
# essai hors fonction
sortie_2005 <- read_excel (fichier)
sortie_2005$vrac <- col_concat (sortie_2005)
sortie_2005 <- sortie_2005 %>%
filter(str_detect (vrac, 'France'), !str_detect (vrac, 'Ile-')) %>% #on garde n=1 : donn?e France
mutate (annee='2005') %>%
select (-one_of ('2005')) %>%
select (-vrac)
import <- function(entree, an) {
sortie <- read_excel (path = entree)
sortie$vrac <- col_concat (sortie)
sortie <- sortie %>%
filter (row_number () == 1) %>% #on garde n=1 : donn?e France
mutate (annee = an) %>%
select (-one_of (an)) %>%
select (-vrac)
}
# essai de la fonction hors boucle
essai_2005 <- import (entree = fichier,
an = '2005')
# dans la boucle
for (i in as.character (seq (from = 2005, to = 2011, by = 2))) {
nom <- paste0 ("porte_a_porte_", i)
entree = paste0 ("U:/cscribe/sources/ademe/collecte/hors_deblais/type_collecte/porte_a_porte_",i,".xlsx")
assign(nom, import (entree = entree, an = i))
}
library (bookdown)
bookdown::render_book('index.Rmd')
setwd ('C:/Users/pirz/GitHub/parcours-r/m1_socle_book')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
renderbook ('index.Rmd')
bookdown::renderbook ('index.Rmd')
bookdown::render_book ('index.Rmd')
book_down::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book('index.Rmd')
df <- read.csv (file = "Data/Base_synth_territoires.csv",
sep = ";", dec = ",")
View(df)
df <- read.csv (file = "Data/Base_synth_territoires.csv",
sep = ";", dec = ",")
df <- select (df, 1:10)
df <- read.csv (file = "Data/Base_synth_territoires.csv",
sep = ";", dec = ",")
df <- select (df, 1:3, 6:10)
str(df)
head(df)
?read.csv
df <- read.csv (file = "Data/Base_synth_territoires.csv",
sep = ";", dec = ",",
colClasses=c(NA, "NULL", NA, "NULL","NULL","NULL",NA, NA, NA, NA, rep ("NULL", 28)))
View(df)
df <- read.csv (file = "Data/Base_synth_territoires.csv",
sep = ";", dec = ",",
colClasses = c (NA, "NULL", "character", "NULL","NULL","NULL",
NA, NA, NA, NA, rep ("NULL", 28)))
str (df)
c (NA, "NULL", "character", "NULL","NULL","NULL",
NA, NA, NA, NA, rep ("NULL", 28)))
c (NA, "NULL", "character", "NULL","NULL","NULL",
NA, NA, NA, NA, rep ("NULL", 28))
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",")
bookdown::render_book ('index.Rmd')
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",")
base_select <- select (base, 1, 3, 7:12)
View(base_select)
base_extrait <- select (base, 1, 3, 7:12)
summary (base_extrait)
summary (pull (base_extrait, NAIS0914))
summary (pull (base_extrait, ZAU))
View(base_extrait)
base_extrait <- select (base, 1, 3, 5, 7:12)
summary (base_extrait)
summary (pull (base_extrait, ZAU))
sum (pull (base_extrait, P14_POP), na.rm = T)
mean (pull (base_extrait, P14_POP), na.rm = T)
median (pull (base_extrait, P14_POP), na.rm = T)
quantile (pull (base_extrait, P14_POP), probs = c (.25, .5, .75), na.rm = T)
base_reg_ann <- group_by (base_extrait, ZAU, REG) %>%
summarise (population_med = median (P14_POP, na.rm = T))
t <- table (base$ZAU, base$REG)
print (t)
t <- table (base$ZAU, base$REG)
print (t)
round (100 * prop.table (t), digits = 1)
print (chisq.test (t))
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
rm(list=ls())
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
library (tidyverse)
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",")
str (pull (base, DEP))
base <- mutate (base, log_SUPERF = log (SUPERF))
base <- mutate (base, log_SUPERF = 100 * log_SUPERF)
base_select <- select (base, CODGEO, LIBGEO, P14_POP)
base_select <- select (base, -CODGEO)
base_filter <- filter (base, DEP == "01" & P14_POP > 10000)
base_rename <- rename (base, ZONE_EMPLOI = ZE)
df <- mutate (base, densite = P14_POP / SUPERF,
tx_natal = 1000 * NAISD15 / P14_POP,
tx_mort = DECESD15 / P14_POP)
View(df)
selection <- select (df, CODGEO, ZAU, REG, DEP,
densite, tx_natal, tx_mort)
bookdown::render_book ('index.Rmd')
rm(list=ls())
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",")
base_extrait <- select (base, 1, 3, 5, 7:12)
summary (base_extrait)
summary (pull (base_extrait, NAIS0914))
summary (pull (base_extrait, ZAU))
sum (pull (base_extrait, P14_POP), na.rm = T)
mean (pull (base_extrait, P14_POP), na.rm = T)
median (pull (base_extrait, P14_POP), na.rm = T)
quantile (pull (base_extrait, P14_POP), probs = c (.25, .5, .75), na.rm = T)
base_reg_ann <- group_by (base_extrait, ZAU, REG) %>%
summarise (population_med = median (P14_POP, na.rm = T))
pull (base, ZAU) # méthode "tidyverse"
base$ZAU # méthode "base"
t <- table (base$ZAU, base$REG)
print (t)
df <- mutate (base, densite = P14_POP / SUPERF,
tx_natal = 1000 * NAISD15 / P14_POP,
tx_mort = DECESD15 / P14_POP,
ZAU2 = as.factor (substr (ZAU, 1, 3))) # Parce que la variable originale est trop longue et caractères bizarres
summary (df)
mean (df$densite)
sd (df$densite)
median (df$densite)
var (df$densite)
median (df$densite)
median (df$densite, ra.rm = T)
df$densite
max(df$densite)
max(df$SUPERF)
max(base$SUPERF)
summary(df)
summary(df$densite)
min(df$densite)
min(df$densite, na.rm = T)
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
var (df$densite, na.rm = T)
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
df <- mutate (base, densite = P14_POP / SUPERF,
tx_natal = 1000 * NAISD15 / P14_POP,
tx_mort = DECESD15 / P14_POP,
ZAU2 = as.factor (substr (ZAU, 1, 3)))
summary (df)
mean (df$densite, na.rm = T)
sd (df$densite, na.rm = T)
median (df$densite, na.rm = T)
var (df$densite, na.rm = T)
df <- mutate(df,std_dens=(densite-mean(densite,na.rm = T))/sd(densite,na.rm = T))
mean (df$std_dens,na.rm = T)
sd (df$std_dens, na.rm = T)
quantile(df$densite,na.rm = T)
quantile(df$densite,probs = seq(0,1,.1),na.rm = T)
t <- table(df$ZAU2)
t
100*prop.table(t) %>% round(digits = 4)
t <- table(df$REG,df$ZAU2)
t
100*prop.table(t) %>% round(digits = 4)
bookdown::render_book ('index.Rmd')
names(base)
as.data.frame(names(base))
rm (list=ls()
)
library (tidyverse)
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",")
str (pull (base, DEP))
base <- mutate (base, log_SUPERF = log (SUPERF))
base <- mutate (base, log_SUPERF = 100 * log_SUPERF)
base_rename <- rename (base, ZONE_EMPLOI = ZE)
df <- mutate (base, densite = P14_POP / SUPERF,
tx_natal = 1000 * NAISD15 / P14_POP,
tx_mort = DECESD15 / P14_POP)
selection <- select (df, CODGEO, ZAU, REG, DEP,
densite, tx_natal, tx_mort)
library (tidyverse)
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",")
base_extrait <- select (base, 1, 3, 5, 7:12)
summary (base_extrait)
View(base_extrait)
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",") %>%
select (1:24) %>%
mutate (log_SUPERF = log (SUPERF))
ggplot (base, aes (log_SUPERF)) + geom_histogram ()
ggplot (base, aes (x=P14_EMPLT, y=MED13)) + geom_point (colour = "blue")
library ("GGally") # pour des graphiques plus jolis
num <- select (base, P14_LOGVAC:PIMP13) %>% sample_n (10000) %>% log ()
ggpairs (num)
require(plotly)
g <- ggplot(data = df, aes (x = REG, fill = REG)) +
geom_bar()
ggplotly(g)
ggplot (data = df, aes (x = log(SUPERF))) +
geom_histogram()
ggplot (data = df, aes( x = log (P14_POP))) +
geom_histogram()
ggplot (data = df, aes( x = P14_POP)) +
geom_histogram()
ggplot (data = df, aes (x = P14_POP)) +
geom_histogram()
ggplot (data = df, aes( x = log (P14_POP))) +
geom_histogram()
ggplot (data = df, aes( x = REG)) +
geom_bar()
ggplot (data = df, aes( x = ZAU)) +
geom_bar()
ggplot (data = df, aes( x = REG)) +
geom_bar() +
coord_flip ()
ggplot (data = df, aes( x = REG)) +
geom_bar() +
coord_flip ()
bookdown::render_book ('index.Rmd')
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",") %>%
select (1:24) %>%
mutate (log_SUPERF = log (SUPERF))
ggplot (base, aes (log_SUPERF)) + geom_histogram ()
bookdown::render_book ('index.Rmd')
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",")
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",") %>%
select (1:24)
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",") %>%
select (1:24) %>%
mutate (log_SUPERF = log (SUPERF))
bookdown::render_book ('index.Rmd')
bookdown::render_book ('index.Rmd')
rm(lidt=ls())
rm(list=ls())
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",") %>%
select (1:24) %>%
mutate (log_SUPERF = log (SUPERF))
ggplot (base, aes (x = log_SUPERF)) + geom_histogram ()
ggplot (base, aes (x=P14_EMPLT, y=MED13)) + geom_point (colour = "blue")
ggplot (base, aes (x=log (P14_EMPLT), y=log (MED13))) + geom_point (colour = "blue")
library ("GGally") # pour des graphiques plus jolis
num <- select (base, P14_LOGVAC:PIMP13) %>% sample_n (10000) %>% log ()
ggpairs (num) ## fonction ggpairs() de GGally
require (plotly)
g <- ggplot (data = df, aes (x = REG, fill = REG)) +
geom_bar ()
ggplotly (g)
g <- ggplot (data = df, aes (x = REG, fill = REG)) +
geom_bar ()
g
plot(g)
ggplot(g)
ggplot (data = df, aes (x = REG, fill = REG))
ggplot (data = base, aes (x = REG, fill = REG))
g <- ggplot (data = df, aes (x = REG, fill = REG)) +
geom_bar ()
ggplot(g)
ggplotly (g)
ggplot (data = df, aes (x = REG, fill = REG)) +
geom_bar ()
ggplot (data = base, aes (x = REG, fill = REG)) +
geom_bar ()
g <- ggplot (data = base, aes (x = REG, fill = REG)) +
geom_bar ()
ggplotly (g)
g <- ggplot (data = base, aes (x = as.factor (REG), fill = as.factor (REG))) +
geom_bar ()
ggplotly (g)
g <- ggplot (data = base, aes (x = as.factor (REG), fill = as.factor (REG))) +
geom_bar ()
ggplotly (g)
require (plotly)
g1 <- ggplot (data = base, aes (x = REG, fill = REG)) +
geom_bar ()
g2 <- ggplot (data = base, aes (x = as.factor (REG), fill = as.factor (REG))) +
geom_bar ()
ggplotly (g1)
ggplotly (g2)
ggplot (data = base, aes (x = P14_POP)) +
geom_histogram()
ggplot (data = base, aes (x = P14_POP)) +
geom_histogram()
ggplot (data = df, aes (x = log (P14_POP))) +
geom_histogram()
ggplot (data = df, aes (x = log (P14_POP))) +
geom_histogram()
ggplot (data = base, aes (x = P14_POP)) +
geom_histogram()
ggplot (data = base, aes (x = log (P14_POP))) +
geom_histogram()
ggplot (data = df, aes (x = REG)) +
geom_bar() +
coord_flip ()
ggplot (data = base, aes (x = REG)) +
geom_bar() +
coord_flip ()
ggplot (data = base, aes (x = as.factor (REG))) +
geom_bar() +
coord_flip ()
ggplot (data = base, aes (x = REG)) +
geom_bar()
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",") %>%
select (1:24) %>%
mutate (log_SUPERF = log (SUPERF),
REG = as.factor (REG))
ggplot (base, aes (x = log_SUPERF)) + geom_histogram ()
ggplot (base, aes (x=P14_EMPLT, y=MED13)) + geom_point (colour = "blue")
ggplot (base, aes (x=log (P14_EMPLT), y=log (MED13))) + geom_point (colour = "blue")
library ("GGally") # pour des graphiques plus jolis
num <- select (base, P14_LOGVAC:PIMP13) %>% sample_n (10000) %>% log ()
ggpairs (num) ## fonction ggpairs() de GGally
g <- ggplot (data = base, aes (x = REG, fill = REG)) +
geom_bar ()
ggplotly (g)
ggplot (data = base, aes (x = P14_POP)) +
geom_histogram()
ggplot (data = base, aes (x = log (P14_POP))) +
geom_histogram()
ggplot (data = base, aes (x = REG)) +
geom_bar()
ggplot (data = df, aes( x = REG, fill = REG)) +
geom_bar()
ggplot (data = base, aes( x = REG, fill = REG)) +
geom_bar()
ggplot (data = base, aes (x = log (P14_POP), y = log (P14_LOGVAC))) +
geom_point()
ggplot (data = df, aes( x = densite, y = tx_mort, color = REG)) +
geom_point()
ggplot (data = base, aes( x = densite, y = tx_mort, color = REG)) +
geom_point()
base <- read.csv ("Data/Base_synth_territoires.csv",
header = T, sep=";", dec=",") %>%
select (1:24) %>%
mutate (log_SUPERF = log (SUPERF),
REG = as.factor (REG),
densite = P14_POP / SUPERF,
tx_natal = 1000 * NAISD15 / P14_POP,
tx_mort = DECESD15 / P14_POP)
ggplot (data = base, aes( x = densite, y = tx_mort, color = REG)) +
geom_point()
ggplot (data = base, aes( x = log(densite), y = tx_mort, color = REG)) +
geom_point()
plot (iris)
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
calcul_IMC <- function (poids, taille)
{
## La taille est exprimée en mètres
imc <- poids / taille ^ 2
return (imc)
}
calcul_IMC(poids=80,taille=1.89)
calcul_IMC(poids=60,taille=1.55)
diag_IMC <- function(poids,taille)
{
imc <- poids/taille^2
if (imc <18.5) {diag <- "maigre"}
else if (imc<25) {diag <- "normal"}
else {diag <- "surpoids"}
return(diag)
}
diag_IMC(poids=60,taille=1.89)
diag_IMC(poids=80,taille=1.89)
diag_IMC(poids=80,taille=1.55)
?seq
seq(from = 50, to = 100, by = 5)
for (pp in seq(from = 50, to = 100, by = 5))
{
print(paste ("Taille = 1,70m, poids =", pp, "Diagnotic :",
diag_IMC (poids = pp, taille = 1.70)))
}
rep (1, 100)
?rep
rep (x = 1, times = 100)
?seq
rm (list = ls ())
x <- c (1, 160, 2, 9, 60)
x1 <- c("Je", "programme", "en", "R") # Guillemets pour indiquer que c'est une variable textuelle
y <- seq (from = 1, to = 10, by = 1)
z <- rep (x = 1, times = 100)
x <- rnorm (n = 30)
# création de vecteurs avec la fonction c() = combine
v1 <- c( 3, 4, 12, 15, 32, 6, 1, 2, 3, 9)
# avec la fonction seq() = sequence, g?n?ralisation de la syntaxe ci-dessus
v2 <- seq(from = 1 , to = 15 , by = 1.5)
# syntaxe équivalente mais préférable car plus lisible :
v2b <- seq (from=1, to=15, by=1.5)
v3 <- 1:10
v5 <- rep (x = c(3, 4, 1.2, 8, 9), times = 2)
v6 <- rep (x = 1:5, times = 2)
vtaille <- rep (x = c ("S", "L"), times = 5)
vtaille <- factor (vtaille)
vtaille
gtaille <- paste("X", vtaille, sep = "")
gtaille <- factor (gtaille)
toutes_taille <- c (as.character (vtaille), as.character (gtaille))
toutes_taille <- as.factor (toutes_taille)
levels (toutes_taille)
gtaille <- paste("X", vtaille, sep = "")
gtaille <- factor (gtaille)
mat <- matrix (rnorm (100), ncol = 10, nrow = 10)
arr <- array (rnorm (300), dim = c(10, 10, 3))
mat
arr
str (liste [1])
str (liste [[1]])
dataf <- data.frame (vtaille, v1, v2, v3, v4, v5, v6)
liste <- list (vtaille, v1, v2, v3, v4, v5, v6)
rm (list = ls ())
x <- c (1, 160, 2, 9, 60)
x1 <- c("Je", "programme", "en", "R") # Guillemets pour indiquer que c'est une variable textuelle
y <- seq (from = 1, to = 10, by = 1)
z <- rep (x = 1, times = 100)
x <- rnorm (n = 30)
# création de vecteurs avec la fonction c() = combine
v1 <- c( 3, 4, 12, 15, 32, 6, 1, 2, 3, 9)
# avec la fonction seq() = sequence, g?n?ralisation de la syntaxe ci-dessus
v2 <- seq(from = 1 , to = 15 , by = 1.5)
# syntaxe équivalente mais préférable car plus lisible :
v2b <- seq (from=1, to=15, by=1.5)
v3 <- 1:10
# avec la fonction rep() = répétition
v4 <- rep (x = 4, times = 10)
# ces commandes peuvent être combinées. Pratique pour cr?er des variables "facteur"
v5 <- rep (x = c(3, 4, 1.2, 8, 9), times = 2)
v6 <- rep (x = 1:5, times = 2)
# vecteurs de type texte ou factor
vtaille <- rep (x = c ("S", "L"), times = 5)
vtaille <- factor (vtaille)
# concaténation de vecteurs
gtaille <- paste("X", vtaille, sep = "")
gtaille <- factor (gtaille)
toutes_taille <- c (as.character (vtaille), as.character (gtaille))
toutes_taille <- as.factor (toutes_taille)
levels (toutes_taille)
dataf <- data.frame (vtaille, v1, v2, v3, v4, v5, v6)
liste <- list (vtaille, v1, v2, v3, v4, v5, v6)
names(liste) <- c ("vtaille", "v1", "v2", "v3", "v4", "v5", "v6")
dataf$vtaille
liste$vtaille
rm (dataf, vtaille, v1, v2, v2b, v3, v4, v5, v6)
mat <- matrix (rnorm (100), ncol = 10, nrow = 10)
arr <- array (rnorm (300), dim = c(10, 10, 3))
mat
arr
apply (arr, MARGIN = 3, FUN=mean)
apply (arr, MARGIN = c(2,3), FUN = mean)
mat [1,1]
mat [1,]
mat [,1]
arr [1,1,1]
arr [1,,]
arr [,,1]
str (liste [1])
str (liste [[1]])
liste[1]
liste[[1]]
str (liste [1])
str (liste [[1]])
bookdown::render_book('index.Rmd')
library(tidyverse)
library(bookdown)
getwd
getwd()
bookdown::render_book ("index.Rmd")
bookdown::render_book ("index.Rmd")
getwd
getwd()
library(bookdown)
render_book('index.Rmd')
bookdown::render_book('index.Rmd')

# Correction des exercices

## Exercice 4.5.2

Exercice : Les données mensuelles sitadel

A partir du fichier sitadel de février 2017, sur la région Pays de la Loire, livré un fichier contenant pour chaques mois, et pour chaque indicateur lié aux autorisations de logements :

- les cumuls annuels 

- leur évolutions sur 12 mois

- leur part dans l'ensemble des logements autorisés

```{r exositadel1, eval=F}
library(dplyr)
library(RcppRoll)
library(readxl)
rm(list=ls())

sitadel<-read_excel("../data/ROES_201702.xls",sheet="AUT_REG",
                    col_types=c("text","text","numeric","numeric","numeric","numeric"))
sitadel52<-filter(sitadel,REG=="52")
sitadel52<-mutate(sitadel52,
                 log_AUT_cum=roll_sumr(log_AUT,12),
                 ip_AUT_cum=roll_sumr(ip_AUT,12),
                 ig_AUT_cum=roll_sumr(ig_AUT,12),
                 colres_AUT_cum=roll_sumr(colres_AUT,12),
                 log_AUT_cum_evo=round(100*log_AUT_cum/lag(log_AUT_cum,12)-100,1),
                 ip_AUT_cum_evo=100*ip_AUT_cum/lag(ip_AUT_cum,12)-100,
                 ig_AUT_cum_evo=100*ig_AUT_cum/lag(ig_AUT_cum,12)-100,
                 colres_AUT_cum_evo=100*colres_AUT_cum/lag(colres_AUT_cum,12)-100,
                 ip_AUT_cum_part=100*ip_AUT_cum/log_AUT_cum,
                 ig_AUT_cum_part=100*ig_AUT_cum/log_AUT_cum,
                 colres_AUT_cum_part=100*colres_AUT_cum/log_AUT_cum
)

```


## Exercice 4.5.3

Convertir les données de la table exercice pertinentes au format date.

```{r exodate, eval=F}
library(dplyr)
library(lubridate)
rm(list=ls())
exercice<-mutate(exercice,
                 date_prelevement=ymd(date_prelevement),
                 date_creation=ymd(date_creation))

```

## Exercices 4.10

### Sitadel

Sur les données "sitadel" les opérations suivantes en utilisant l'opérateur %>% :

- les mêmes calculs que ceux réalisés sur la région Centre Val de Loire, mais sur l'ensemble des régions

- Les aggrégations par années civiles pour l'ensemble des régions et leur évolution.

```{r exositadel2, eval=F}
library(dplyr)
library(RcppRoll)
library(readxl)
library(stringr)
rm(list=ls())

sitadel<-read_excel("../data/ROES_201702.xls",sheet="AUT_REG",
                    col_types=c("text","text","numeric","numeric","numeric","numeric")) %>%
  group_by(REG) %>%
  mutate(
    log_AUT_cum=roll_sumr(log_AUT,12),
    ip_AUT_cum=roll_sumr(ip_AUT,12),
    ig_AUT_cum=roll_sumr(ig_AUT,12),
    colres_AUT_cum=roll_sumr(colres_AUT,12),
    log_AUT_cum_evo=round(100*log_AUT_cum/lag(log_AUT_cum,12)-100,1),
    ip_AUT_cum_evo=100*ip_AUT_cum/lag(ip_AUT_cum,12)-100,
    ig_AUT_cum_evo=100*ig_AUT_cum/lag(ig_AUT_cum,12)-100,
    colres_AUT_cum_evo=100*colres_AUT_cum/lag(colres_AUT_cum,12)-100,
    ip_AUT_cum_part=100*ip_AUT_cum/log_AUT_cum,
    ig_AUT_cum_part=100*ig_AUT_cum/log_AUT_cum,
    colres_AUT_cum_part=100*colres_AUT_cum/log_AUT_cum
  )

sitadel<-read_excel("../data/ROES_201702.xls",sheet="AUT_REG",
                    col_types=c("text","text","numeric","numeric","numeric","numeric")) %>%
  mutate(annee=str_sub(date,1,4)) %>%
  group_by(REG,annee) %>%
  summarise(
    log_AUT_cum=sum(log_AUT),
    ip_AUT_cum=sum(ip_AUT),
    ig_AUT_cum=sum(ig_AUT),
    colres_AUT_cum=sum(colres_AUT))  %>%
  ungroup() %>%
  group_by(REG) %>%
  mutate(log_AUT_cum_evo=100*log_AUT_cum/lag(log_AUT_cum,1)-100,
    ip_AUT_cum_evo=100*ip_AUT_cum/lag(ip_AUT_cum,1)-100,
    ig_AUT_cum_evo=100*ig_AUT_cum/lag(ig_AUT_cum,1)-100,
    colres_AUT_cum_evo=100*colres_AUT_cum/lag(colres_AUT_cum,1)-100,
    ip_AUT_cum_part=100*ip_AUT_cum/log_AUT_cum,
    ig_AUT_cum_part=100*ig_AUT_cum/log_AUT_cum,
    colres_AUT_cum_part=100*colres_AUT_cum/log_AUT_cum
    )
```

### Pesticides

Sur les données “pesticides” :

- Calculer le taux de quantification par année : nombre de fois où la molécule a été retrouvée (code_remarque=1) sur le nombre de fois où elle a été cherchée (code_remarque = 1,2,7 ou 10)

- Trouver pour chaque station, sur l’année 2016, le prelevement ayant le pire cumul d’analyse mesuré.

```{r}
taux_de_quantification<-exercice %>% 
  mutate(year=year(date_prelevement),
         num=1*(code_remarque==1),
         denom=1*(code_remarque %in% c(1,2,7,10))) %>% 
  group_by(year,code_parametre) %>% 
  summarise(taux_de_quantification=100*sum(num)/sum(denom))

station_avec_le_pire_cumul_en_2016<-exercice %>% 
  filter(code_remarque==1,year(date_prelevement)==2016) %>% 
  group_by(libelle_station,code_station,code_prelevement) %>% 
  summarise(resultat_analyse=sum(resultat_analyse)) %>% 
  ungroup() %>% 
  filter(resultat_analyse==max(resultat_analyse))
```

## Exercice 5.1

- refaire la table exercice à partir des données originelles
- calculer le nombre d’analyses réalisées sur des molécules présentes dans le référentiel, produire une liste des molécules non retrouvées.
- calculer le nombre d’analyses pour lesquels on ne retrouve pas le prélèvement associé, produire une table des analyses en anomalie.

```{r}
recalcul_exercice<-analyse %>%
  inner_join(prelevement) %>%
  inner_join(station) %>%
  mutate(date_creation=as.character(date_creation),
         annee=year(date_prelevement))
analyse %>% 
  inner_join(parametre) %>% 
  summarise(n=count(.)) %>% 
  pull(n)

analyse_avec_code_prelevement_non_retrouve_dans_table_prelevement<-analyse %>% 
  anti_join(prelevement)

analyse_avec_code_prelevement_non_retrouve_dans_table_prelevement2<-analyse %>% 
  filter(!(code_prelevement %in% unique(prelevement$code_prelevement)))
```

## Exercice 7

Calculer à partir des tables fournies dans le fichier *majic.RData* issues des [fichiers fonciers](http://piece-jointe-carto.developpement-durable.gouv.fr/NAT004/DTerNP/html3/_ff_descriptif_tables_image.html#pnb10) un indicateur d'étalement urbain entre 2009 et 2014 à la commune et à l'epci sur la région Pays de la Loire.

```{r exomajic, eval=F}
load("../data/majic.RData")
#pour chaque milésime de majic, on remet les données sur la nouvelle carte des territoires et on créer une variable annéee

majic_2009<-bind_rows(majic_2009_com44,majic_2009_com49,majic_2009_com53,majic_2009_com72,majic_2009_com85) %>%
            left_join(com2017,by=c("idcom"="depcom")) %>%
            select(-idcom,-idcomtxt) %>%
            group_by(epci_2017,depcom2017) %>%
            summarise_all(funs(sum)) %>%
            mutate(annee=2009)
            
majic_2014<-bind_rows(majic_2014_com44,majic_2014_com49,majic_2014_com53,majic_2014_com72,majic_2014_com85) %>%
  left_join(com2017,by=c("idcom"="depcom")) %>%
  select(-idcom,-idcomtxt) %>%
  group_by(epci_2017,depcom2017) %>%
  summarise_all(funs(sum)) %>%
  mutate(annee=2014)

#on aggrège les données 2009 et 2014 et on utilise un enchainement gather/spread pour renomer les données d'usage du sol en fonction du millésime

majic<-bind_rows(majic_2009,majic_2014) %>%
      gather(dcnt,value,dcntpa:dcnt13) %>%
      mutate(dcnt=str_c(dcnt,annee,sep="_")) %>%
      select(-annee) %>%
      spread(dcnt,value)

#on passe également les données de population sur la nouvelle carte des territoires
population_2009 <-population_2009 %>%
                  left_join(com2017,by=c("idcom"="depcom")) %>%
                  select(-idcom) %>%
                  group_by(epci_2017,depcom2017) %>%
                  summarise_all(funs(p2009=sum))

population_2014 <-population_2014 %>%
  left_join(com2017,by=c("idcom"="depcom")) %>%
  select(-idcom) %>%
  group_by(epci_2017,depcom2017) %>%
  summarise_all(funs(p2014=sum))

#On aggrége les données majic avec les données du recensement et on calcul les taux de croissance de l'artificialisation et de la population

majic<-majic %>%
       left_join(population_2009) %>%
       left_join(population_2014) %>%
       mutate(evoarti=100*(dcnt07_2014+dcnt09_2014+dcnt10_2014+dcnt11_2014+dcnt12_2014+dcnt13_2014)/(dcnt07_2014+dcnt09_2009+dcnt10_2009+dcnt11_2009+dcnt12_2009+dcnt13_2009)-100,
              evopop=100*p2014/p2009-100)
#On calcul l'indicateur d'étalement urbain en fonction de la définition diffusée dans le rapport du SOeS.
#Seule différence ici :  
#au lieu de différencier les catégories 3,4,5 en fonction du taux de croissance de l'artificialisation sur la france entière, on le fait à partir du taux de croissance moyen sur la région

majic <- majic %>%
  mutate(indicateuretalement=case_when(
  evoarti<0 & evopop>=0 ~"1",
  evoarti>=0 & evopop>=0 & evoarti/evopop<=1 ~"2a",
  evoarti<0 & evopop<0 & evoarti/evopop>1 ~"2b",
  evopop<0 & evoarti/evopop>=0 & evoarti/evopop<=1~"2c",
  evopop>0 & evoarti>0 & evoarti<=4.9 & evoarti/evopop>1~"3",
  evopop>0 & evoarti>4.9 & evoarti/evopop>1 & evoarti/evopop<=2~"4",
  evopop>0 & evoarti>4.9 & evoarti/evopop>2~"5",
  evopop<0 & evoarti/evopop<0~"6"
))

#Ventilation des communes par typologie et départements.
table(majic$indicateuretalement,substr(majic$depcom2017,1,2))

```
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, CONNECT, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
write_tsv (inv1, "T:/PNE-LS/SAS/Inventaire_licences/2018/inventaire.xls")
write_tsv (inv1, "T:/PNE-LS/SAS/Inventaire_licences/2018/inventaire.xls")
View(inv1)
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v3.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, CONNECT, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
write_tsv (inv1, "T:/PNE-LS/SAS/Inventaire_licences/2018/inventaire.xls")
View(inv1)
rm (list=ls())
a <- c(rep("A", 3), rep("B", 3), rep("C",2))
b <- c(1,1,2,4,1,1,2,2)
df <-data.frame(a,b)
View(df)
duplicated(df)
df[!duplicated(df), ]
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v3.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, CONNECT, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
View(inv1)
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v4.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, CONNECT, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v4.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, CONNECT, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v4.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, CONNECT, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
inv1 <-   filter (inv, STATUT %in% inst )
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS)
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION))
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence))
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module)
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally()
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n)
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, CONNECT, HPS)
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n)
View(inv1)
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v4.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
View(inv1)
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v3.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
View(inv1)
rm (list = ls ())
library (readODS)
library (tidyverse)
# ATTENTION, à adapter selon nouveaux tarifs. Manque PostGRESQL et HPS
inv <- read_ods (path = "M:/_PNELS/SAS/Gestion des licences - Ministère/Recensement 2017/Utilisateurs_SAS_2017_v3.ods",
sheet = "Install SAS") %>%
mutate (STATUT = as.factor (STATUT)) %>%
rename (HPS = "High Performance Suite", ACCESS_PGSQL = "ACCESS PGSQL") %>%
select (-(Commentaire:Ok_final)) %>%
filter (DG != "DPMA")
inst <- levels(inv$STATUT)[c(2,5)]
inv1 <-   filter (inv, STATUT %in% inst ) %>%
select (SERVICE, IMPUTATION, Base:HPS) %>%
gather (key = module, value = presence, -(SERVICE:IMPUTATION)) %>%
#  mutate(presence = ifelse(is.na(presence), 0, presence)) %>%
filter (!is.na (presence)) %>%
group_by (SERVICE, module) %>%
tally() %>%
spread (module, n) %>%
select (Base, Stat, "Access PC Files", Graph, EG, IML, ETS, INSIGHT, "ACCESS Oracle", ACCESS_PGSQL, AF, FSP, HPS) %>%
mutate_all (funs(replace(., is.na(.), F)))
write_tsv (inv1, "T:/PNE-LS/SAS/Inventaire_licences/2018/inventaire_SAS_2018.xls")
?read.csv
library(dplyr)
?na.approx
library(zoo)
?na.approx
###### Production de graphiques de synthèse sur les formations R, à partir des données stockées dans
# une base Access
rm (list=ls())
library (RODBC)
library (ggplot2)
library (magrittr)
library (dplyr)
################## lecture des données
# Ouverture de la connection avec la base de données
bdd <- odbcConnectAccess2007 ("T:/G2R/Suivi_stagiaires_sessions/recensement_stagiaires_sessions_v2.accdb")
stagiairesParModule <- sqlQuery (bdd,
paste ("SELECT T_modules.Intitulé AS [Module], Count(T_stagiaire_session.Id_Stagiaire) AS [Stagiaires]
FROM (T_modules LEFT JOIN T_sessions ON T_modules.Id_Module = T_sessions.Id_Module) LEFT JOIN T_stagiaire_session ON T_sessions.Id_Session = T_stagiaire_session.Id_Session
GROUP BY T_modules.Intitulé
ORDER BY Count(T_stagiaire_session.Id_Stagiaire) DESC;"))
stagiairesParCVRH <- sqlQuery (bdd,
paste ("SELECT T_CVRH.CVRH, Count(T_stagiaire_session.Id_Stagiaire) AS [Stagiaires]
FROM (T_CVRH INNER JOIN T_sessions ON T_CVRH.Id_CVRH = T_sessions.Id_CVRH) LEFT JOIN T_stagiaire_session ON T_sessions.Id_Session = T_stagiaire_session.Id_Session
GROUP BY T_CVRH.CVRH
ORDER BY Count(T_stagiaire_session.Id_Stagiaire) DESC;"))
stagiairesParVille <- sqlQuery (bdd,
paste("SELECT T_villes.Ville, Count(T_stagiaire_session.Id_Stagiaire) AS [Stagiaires]
FROM T_villes INNER JOIN (T_sessions LEFT JOIN T_stagiaire_session ON T_sessions.Id_Session = T_stagiaire_session.Id_Session) ON T_villes.Id_Ville = T_sessions.Id_Ville
GROUP BY T_villes.Ville
ORDER BY Count(T_stagiaire_session.Id_Stagiaire) DESC;"))
stagiairesParStructure <- sqlQuery (bdd,
paste("SELECT T_stagiaires.Structure0 AS Structure, Count(T_stagiaire_session.Id_Stagiaire) AS Stagiaires
FROM T_stagiaires LEFT JOIN T_stagiaire_session ON T_stagiaires.Id_Stagiaire = T_stagiaire_session.Id_Stagiaire
GROUP BY T_stagiaires.Structure0
ORDER BY Count(T_stagiaire_session.Id_Stagiaire) DESC;"))
################## graphiques
# fonction de sortie graphique
graph <- function (data, varQual) {
data %>%
#  filter (Stagiaires > 0) %>%
ggplot (aes (x=reorder (get(varQual), Stagiaires), y=Stagiaires)) +
geom_bar (stat="identity", fill = "blue", color = "white") +
xlab (varQual) + ylab ("Nombre de stagiaires") +
ggtitle ("") +
theme(axis.title=element_text(size=14,face="bold")) +
coord_flip ()
}
# application de la fonction aux différents data frames
graph (data = stagiairesParModule, varQual = 'Module')
graph (data = stagiairesParCVRH, varQual = 'CVRH')
graph (data = stagiairesParVille, varQual = 'Ville')
graph (data = stagiairesParStructure, varQual = 'Structure')
knitr::opts_chunk$set(echo = TRUE)
# Chargement des tables de la base
T_CVRH <- sqlQuery (bdd, paste ("SELECT * FROM T_CVRH"))
T_Formateurs <- sqlQuery (bdd, paste ("SELECT * FROM T_Formateurs"))
T_Modules <- sqlQuery (bdd, paste ("SELECT * FROM T_Modules"))
T_Sess_For <- sqlQuery (bdd, paste ("SELECT * FROM T_Sess_For"))
T_Sessions <- sqlQuery (bdd, paste ("SELECT * FROM T_Sessions"))
T_Stagiaire_session <- sqlQuery (bdd, paste ("SELECT * FROM T_Stagiaire_session"))
T_Stagiaires <- sqlQuery (bdd, paste ("SELECT * FROM T_Stagiaires"))
T_Villes <- sqlQuery (bdd, paste ("SELECT * FROM T_Villes"))
View(T_Sessions)
Sys.Date()
Nb_sessions <- T_Sessions %>%
select (`Date début` < Sys.Date()) %>%
nrow ()
View(T_Sessions)
T_Sessions <- sqlQuery (bdd, paste ("SELECT * FROM T_Sessions")) %>%
rename (date = 'Date_début')
names(T_Sessions)
T_Sessions <- sqlQuery (bdd, paste ("SELECT * FROM T_Sessions")) %>%
rename (date = 'Date début')
Nb_sessions <- T_Sessions %>%
select ('Date début' < Sys.Date()) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
select ("Date début" < Sys.Date()) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
select (date < Sys.Date()) %>%
nrow ()
T_Sessions <- sqlQuery (bdd, paste ("SELECT * FROM T_Sessions")) %>%
rename (dateD = 'Date début')
Nb_sessions <- T_Sessions %>%
select (dateD < Sys.Date()) %>%
nrow ()
Nb_sessions <- T_Sessions
View(Nb_sessions)
Nb_sessions <- T_Sessions %>%
select (dateD < Sys.Date())
class(Sys.Date)
Nb_sessions <- T_Sessions
Nb_sessions <- T_Sessions %>%
select (dateD < as.Date("2018-02-28")) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
select (dateD < as.Date("2018-02-28")) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
select (dateD) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
select (dateD < as.Date("2018-02-28")) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
select (dateD) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
select (dateD < ymd (as.Date("2018-02-28"))) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
filter (dateD < ymd (as.Date("2018-02-28"))) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
filter (dateD < as.Date("2018-02-28")) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
filter (dateD < as.POSIXct("2018-02-28")) %>%
nrow ()
filter (dateD < Sys.Date() %>%
Nb_sessions <- T_Sessions %>%
filter (dateD < Sys.Date()) %>%
nrow ()
Nb_sessions <- T_Sessions %>%
filter (dateD < as.POSIXct(Sys.Date())) %>%
nrow ()
Nb_jours_stagiaires <- T_Stagiaire_session
View(Nb_jours_stagiaires)
Nb_jours_stagiaires <- T_Stagiaire_session %>%
left_join (y = T_sessions)
View(Nb_jours_stagiaires)
View(T_Sessions)
Nb_jours_stagiaires <- T_Stagiaire_session %>%
left_join (y = T_Sessions) %>%
filter (!is.na (Id_Session)) %>%
nrow ()
Nb_jours_stagiaires <- T_Stagiaire_session %>%
left_join (y = T_Sessions) %>%
filter (!is.na (Id_Session))
View(Nb_jours_stagiaires)
Nb_jours_stagiaires <- T_Stagiaire_session %>%
left_join (y = T_Sessions) %>%
filter (!is.na (Id_Session)) %>%
select (Durée)
colSums()
Nb_jours_stagiaires <- T_Stagiaire_session %>%
left_join (y = T_Sessions) %>%
filter (!is.na (Id_Session)) %>%
select (Durée) %>%
colSums()
T_Sessions <- sqlQuery (bdd, paste ("SELECT * FROM T_Sessions")) %>%
rename (dateD = 'Date début', duree='Durée')
Nb_jours_stagiaires <- T_Stagiaire_session %>%
left_join (y = T_Sessions) %>%
filter (!is.na (Id_Session)) %>%
select (duree) %>%
colSums()
Date_premiere <- min (T_Sessions$`Date début`)
Nb_sessions <- T_Sessions %>%
filter (dateD < as.POSIXct (Sys.Date())) %>%
nrow ()
Date_premiere <- min (T_Sessions$`dateD`)
Date_premiere <- as.Date (min (T_Sessions$`dateD`), "%d/%m/%Y")
?as.Date
Date_premiere <- as.Date (min (T_Sessions$`dateD`), format = "%d/%m/%Y")
Date_premiere <- as.character (as.Date (min (T_Sessions$`dateD`), format = "%d/%m/%Y"))
Date_premiere <- as.character (as.Date (min (T_Sessions$`dateD`), format = ""%m/%d/%y"))
Date_premiere <- as.character (as.Date (min (T_Sessions$`dateD`), format = "%m/%d/%y"))
Date_premiere <- min (T_Sessions$`dateD`)
View(T_Sess_For)
Nb_formateurs <- T_Sess_For %>%
select (Id_Formateur) %>%
unique() %>%
length()
Nb_formateurs <- T_Sess_For %>%
group_by (Id_Formateur) %>%
tally () %>%
nrow ()
Nb_formateurs-pot <- T_Formateurs %>%
nrow ()
Nb_formateurs_pot <- T_Formateurs %>%
nrow ()
origine_stagiaires <- T_Stagiaires %>%
group_by (Structure0) %>%
tally() %>%
filter (n>10)
View(origine_stagiaires)
origine_stagiaires <- T_Stagiaires %>%
group_by (Structure0) %>%
tally() %>%
filter (n>10) %>%
arrange (desc (n))
View(origine_stagiaires)
library("readxl", lib.loc="C:/Program Files/R/R-3.4.2/library")
install.packages("trend")
library("trend", lib.loc="~/R/win-library/3.4")
ata(PagesData)
data(PagesData)
PagesData
pettitt.test(PagesData)
plot(PagesData)
load("E:/parcours-r/m2_preparation_donnees/V2/Préparer ses données avec R et le Tidyverse/data/FormationPreparationDesDonnées.RData")
sitadel<-read_excel("data/ROES_201702.xls",sheet="AUT_REG",
col_types=c("text","text","numeric","numeric","numeric","numeric"))
datatable(sitadel)
library(tidyr)
library(forcats)
library(lubridate)
library(stringr)
library(RcppRoll)
library(DT)
library(readxl)
library(dbplyr)
library(RPostgreSQL)
library(rsdmx)
library(sf)
sitadel<-read_excel("data/ROES_201702.xls",sheet="AUT_REG",
col_types=c("text","text","numeric","numeric","numeric","numeric"))
datatable(sitadel)
getwd()
setwd("E:/parcours-r/m2_preparation_donnees/V2/Préparer ses données avec R et le Tidyverse/data")
getwd()
sitadel<-read_excel("ROES_201702.xls",sheet="AUT_REG",
col_types=c("text","text","numeric","numeric","numeric","numeric"))
datatable(sitadel)
View(sitadel)
View(prelevement)
View(prelevement)
levels(prelevement$code_reseau)
unique(prelevement$code_reseau)
communes2017 <- st_read(dsn="../data/refgeo2017/communes2017.geojson")
communes2017 <- st_read(dsn="data/refgeo2017/communes2017.geojson")
getwd()
communes2017 <- st_read(dsn="refgeo2017/communes2017.geojson")
sitadel <- read_excel ("data/ROES_201702.xls", sheet = "AUT_REG",
col_types = c ("text","text","numeric","numeric","numeric","numeric"))
datatable (sitadel)
```
sitadel <- read_excel ("ROES_201702.xls", sheet = "AUT_REG",
col_types = c ("text","text","numeric","numeric","numeric","numeric"))
datatable (sitadel)
```
sitadel <- read_excel ("ROES_201702.xls", sheet = "AUT_REG",
col_types = c ("text","text","numeric","numeric","numeric","numeric"))
sitadel <- read_excel ("ROES_201702.xls", sheet = "AUT_REG",
col_types = c ("text","text","numeric","numeric","numeric","numeric"))
datatable (sitadel)
url <- "http://www.acoss.fr/files/Donnees_statistiques/SEQUOIA_TRIM_REGION.zip"
download.file (url, destfile="SEQUOIA_TRIM_REGION.zip", method="auto")
unzip (zipfile = "SEQUOIA_TRIM_REGION.zip", exdir = "data/")
unzip (zipfile = "SEQUOIA_TRIM_REGION.zip", exdir = "")
unzip (zipfile = "SEQUOIA_TRIM_REGION.zip")
SEQUOIA <- read_excel ("SEQUOIA_TRIM_REGION_BRUT.xls", sheet = "PAYS_DE_LA_LOIRE")
datatable (SEQUOIA)
Carte_EPCI_France <- st_read (dsn = "refgeo2017", layer = "Contour_epci_2017_region")
plot(Carte_EPCI_France)
communes2017 <- st_read (dsn = "refgeo2017/communes2017.geojson")
communes2017 <- st_read (dsn = "refgeo2017/communes2017.geojson")
plot(communes2017)
rm (list=ls())
load("C:/Users/pirz/GitHub/parcours-r/m2_preparation_donnees/V2/Préparer ses données avec R et le Tidyverse/data/FormationPreparationDesDonnées.RData")

[
["index.html", "Découvrir R et RStudio Chapitre 1 Introduction 1.1 Le parcours de formation 1.2 Objectifs du module 1", " Découvrir R et RStudio Thierry Zorn, Murielle Lethrosne, Vivien Roussez &amp; Pascal Irz 25 August 2019 Chapitre 1 Introduction Crédit photographique Pascal Boulin 1.1 Le parcours de formation Ce dispositif de formation vise à faire monter en compétence les agents du MTES (Ministère de la transition écologique et solidaire) et du MCT (Ministère de la cohésion des territoires) dans le domaine de la science de la donnée avec le logiciel R. Il est conçu pour être déployé à l’échelle nationale par le réseau des CVRH (Centre de Valorisation des Ressources Humaines). Le parcours proposé est structuré en modules de 2 jours chacun. Les deux premiers (ou un niveau équivalent) sont des pré-requis pour suivre les suivants qui sont proposés “à la carte” : Socle : Premier programme en R Socle : Préparation des données Statistiques descriptives Analyses multivariées Datavisualisation : Produire des graphiques, des cartes et des tableaux Documents reproductibles avec RMarkdown (2ème semestre 2019) … et en perspective : analyse spatiale, applis interactives avec Shiny, big data, etc. La mise à disposition des supports de formation se fait désormais par la page d’accueil du parcours de formation. Ces supports sont en licence ouverte. Si vous souhaitez accéder aux sources ou aux données mobilisées pendant les formations, il faut directement les télécharger depuis le Github du ministère. Pour vous tenir au courant de l’offre de formation proposée par le réseau des CVRH, consultez la plateforme OUPS (un accès intranet MTES-MCT est nécessaire). Vous pouvez vous y abonner pour recevoir les annonces de formation qui vous intéressent. Il existe une liste pour échanger de l’information, discuter autour de R ou encore faire part de difficultés pour trouver ensemble les solutions. Pour s’insrire, envoyer un message vide avec le titre “subscribe labo.communaute-r” à l’adresse sympa@developpement-durable.gouv.fr. 1.2 Objectifs du module 1 Ce module vise à faire découvrir : R et son écosystème L’interface de RStudio Les méthodes élémentaires d’importation des données Des premières statistiques Des premières représentations graphiques Il s’agit d’avoir les clefs pour commencer à travailler rapidement sur R en complément, voire en remplacement d’autres outils (Excel, SAS…). Les concepts de programmation sont également abordés pour comprendre les syntaxes proposées dans les différents forums d’aide. "],
["r-son-ecosysteme-et-ses-possibilites.html", "Chapitre 2 R, son écosystème et ses possibilités 2.1 Le groupe de référents 2.2 R c’est quoi ? 2.3 Un peu d’histoire 2.4 Un logiciel libre 2.5 Que peut-on faire avec R ? 2.6 Un logiciel modulaire 2.7 Des exemples de ce qu’on peut faire avec R :", " Chapitre 2 R, son écosystème et ses possibilités 2.1 Le groupe de référents Un groupe pour structurer une offre de formations sur R Un réseau d’entraide 2.2 R c’est quoi ? Un langage de programmation interprété exécutable pas à pas \\(\\rightarrow\\) lignes de code Un logiciel interactif permettant de traiter divers types de données 2.3 Un peu d’histoire A l’origine existait le langage S, servant à programmer avec des données (Bell laboratory, années 70) Au milieu des années 90, mélange de S et du langage Lisp pour le dédier à l’analyse de données et aux graphiques \\(\\rightarrow\\) création de R. Ihaka R, Gentleman R (1996) R: A Language for Data Analysis and Graphics. Journal of Computational and Graphical Statistics, 5(3), 299–314 S’est d’abord développé dans le monde académique, puis a essaimé vers d’autres domaines professionnels, voire associatifs Système toujours d’actualité - Mise à jour tous les 6 mois Avenir dans la statistique publique : Adopté comme standard par l’Insee (à l’horizon 2025) et divers SSM. Des packages pour : charger les données sdmx de l’Insee, charger les formats des organisations internationales (Eurostat, OCDE, ONU, etc.), gérer les millésimes du référentiel communal, etc. 2.4 Un logiciel libre Disponible en libre téléchargement sur le site officiel du CRAN Installable sur la plupart des systèmes d’exploitation Utilisé en recherche, en enseignement et en entreprise Une communauté très active : Forum des utilisateurs de R en français Communauté française des utilisateurs de R (avec des packages spécifiques, qui permettent de gérer les changements de géographie communale par exemple) : Frrrenchies Slack de ces utilisateurs (pour les questions/réponses, actualités…) Slack Forum des utilisateurs de R en français : http://forums.cirad.fr/logiciel-R/ R-bloggers : https://www.r-bloggers.com/ Stackoverflow : https://stackoverflow.com/questions/tagged/r C’est un logiciel libre : les utilisateurs ont la liberté d’exécuter, copier, distribuer, étudier, modifier et améliorer ce logiciel. R fait partie de la “galaxie” GNU (GNU’s Not Unix). R est donc libre, gratuit et multiplateforme. Le site CRAN = Comprehensive R Archive Network est le site de référence pour R. Il contient non seulement les installeurs du logiciel mais également de nombreuses ressources : documentations, FAQ, tutoriels… 2.5 Que peut-on faire avec R ? Lire des données de formats divers Les manipuler (prétraitements) Les enrichir à partir de données externes Les analyser, les modéliser Présenter les résultats (tableaux, graphiques, cartes) Publier … … et ce au moyen d’une palette de méthodes extrêmement diversifiée. Privilégie la flexibilité et le découpage des traitements en parties simples. 2.6 Un logiciel modulaire Le package base contient nombreuses fonctionnalités Extensible au moyen de packages (1 package = 1 ensemble de nouvelles fonctions) Nombreuses extensions spécialisées Proposition d’une version installable de R + ensemble de packages utiles De base, R permet déjà de faire un très grand nombre de choses avec son socle commun : le package base. Pour afficher la liste des fonctions disponibles dans le package base : library(help = &#39;base&#39;) Sur ce package base vient se greffer un ensemble de packages (plugins, modules) complémentaires. Un package est une bibliothèque de fonctions. La plupart de ceux qui font référence sont mis à disposition de tous sur le dépôt CRAN. Cela permet d’étendre à l’infini les possibilités de R : celles-ci sont seulement limitées par la volonté de développement des utilisateurs. De même que les packages sont dépendants de fonctions du module principal base, certains packages peuvent être dépendants de fonctionnalités d’autres packages \\(\\rightarrow\\) notion d’arbre des dépendances (géré par R de façon transparente). Sructure modulaire \\(\\rightarrow\\) il existe de multiple façons d’effectuer une même tâche. Il suffit d’une méthode maîtrisée pour aller au résultat. Les fonctionnalités utilisables dans R, sont en perpétuelle évolution et permettent d’intégrer les méthodes les plus récentes dans des domaines qui évoluent rapidement : modélisation, analyse spatiale, dataviz,… Le groupe des référents propose un pack d’installation comprenant R, RStudio et un ensemble de packages en phase avec le parcours de formation. Vous pouvez le télécharger ici en deux fichiers compressés (nécessite un accès intranet MTES-MCT). 2.7 Des exemples de ce qu’on peut faire avec R : Le support de cette formation Visualisation du compte du logement Les pesticides dans les cours d’eau des Pays de la Loire Des exemples de ce qu’on peut faire avec shiny "],
["presentation-de-linterface-et-premieres-manipulations.html", "Chapitre 3 Présentation de l’interface et premières manipulations 3.1 Une interface dédiée : RStudio 3.2 Session et répertoire de travail 3.3 Exercice 3.4 Prise en main de la console 3.5 Création d’une variable 3.6 Exercice 3.7 Utilité des scripts 3.8 Exercice : utiliser un script", " Chapitre 3 Présentation de l’interface et premières manipulations Ce chapitre permet de découvrir l’interface de travail RStudio et les principales fonctionnalités pour débuter. 3.1 Une interface dédiée : RStudio Environnement de développement conçu spécialement pour R Interface utilisateur simple, conviviale, configurable et intégrant plusieurs outils Disponible sur http://www.rstudio.com L’interface RStudio est composée de différents panneaux, dont l’arrangement peut être reconfiguré, incluant une console, un navigateur de fichiers et graphiques, l’espace de travail et l’historique des commandes. D’autres environnements graphiques existent, Rstudio semble le plus approprié à nos métiers Lancer le script exemple Démonstration : “./Presentation RStudio” 3.2 Session et répertoire de travail Session de travail R : commence à l’ouverture de RStudio et se termine en le quittant Répertoire de travail R : Dossier dans lequel le logiciel va chercher les fichiers de scripts et de données Tout ce qui a été fait au cours d’une session peut être enregistré dans le répertoire de travail : données historique des fonctions … Nouvelles fonctions Attention setwd() pour définir un répertoire de travail Seulement / et pas \\ help() et ? pour afficher l’aide . dir() pour lister un répertoire . Attention avec le répertoire de travail : si on l’écrit en dur setwd('...'), les anti-slash windows (\\) doivent être remplacés par des slash(/) Concernant le répertoire de travail, quelques conseils : Créer un nouveau répertoire pour un projet particulier qui sera votre répertoire de travail Créer des sous-répertoires dans ce répertoire : “./Data”, “./Figures”, “./Redaction”… Rassembler autant que possible les fichiers qui seront utilisés dans le cadre de ce projet et éviter d’aller chercher des fichiers ailleurs 3.3 Exercice Sur le poste de travail, créer un dossier devant servir de dossier de travail au cours de la formation. Dans Rstudio, définir ce dossier comme répertoire de travail directement en utilisant setwd('') Appeler l’aide en ligne par ?setwd ou help(setwd) Faire une recherche dans la partie Help de RStudio Lire le contenu du répertoire de travail avec dir() 3.4 Prise en main de la console Effectuer et afficher les résultats de calculs de base (+, -, *, /, ^, ...) Utiliser des fonctions spécifiques : sum, abs, round… On peut remonter dans l’historique des fonctions pour en rappeler une Nouvelles fonctions Attention sum() pour sommer un résultat Séparateur décimal point (.) abs() pour retourner la valeur absolue . round() pour arrondir un nombre . flèches pour naviguer dans l’historique . 3.5 Création d’une variable On assigne un contenu à une variable au moyen de &lt;- ma_variable &lt;- 2 ma_variable &lt;- &quot;Toulouse&quot; ma_variable &lt;- c(&quot;Toulouse&quot;, &quot;Nantes&quot;, &quot;Strasbourg&quot;) ma_variable &lt;- 1:10 \\(\\rightarrow\\) Les variables peuvent être numérique, texte ou boléen (TRUE/FALSE) et elles peuvent être réutilisées. Nouvelles fonctions Attention pour le nommage des variables ls() pour faire lister les variables existantes Casse -&gt; seulement minuscules paste() pour concaténer des variables textes Pas de caractères spéciaux ni accentués rm() pour supprimer une variable Pas d’espaces ni tirets (-) ; préférer (_) Adopter des règles de nommage cohérentes, par exemples celles-ci. 3.6 Exercice Créer plusieurs variables numériques par assignation a &lt;- 5, b &lt;- 4 Regarder l’onglet Environnement Afficher la liste des variables avec la fonction ls() Faire un calcul avec ces variables et voir le résultat (a+b) etc. Créer une troisième variable à partir des deux premières c &lt;- a+b*3 Ré-assigner une variable : a&lt;-10 et vérifier l’onglet environnement Créer une variable chaîne de caractère (utilisation des simples quotes et des double-quotes) t &lt;- 'chaine' Concaténer a et t avec paste(a,t) Expérimenter la casse des noms de variables : créer A &lt;- 15 et B &lt;- 12 et vérifier l’onglet environnement Supprimer les variables A et B avec la fonction rm() Aide en ligne ?ls et ?rm Attention : Pour supprimer toutes les variables rm(list = ls()) 3.7 Utilité des scripts Garder la trace d’une longue succession de lignes de code Pouvoir exécuter ce code (pas à pas ou en entier) Le modifier plus rapidement pour l’adapter Pouvoir le réutiliser avec de nouvelles données Nouvelles fonctions Attention # pour des commentaires explicatifs du code Importance de bien commenter print() pour afficher sur la console . Ctrl+R pour lancer un script ligne par ligne . Utilisation simple de R \\(\\rightarrow\\) mode console. Chaque ordre, bout de code est rentré et exécuté au fur et à mesure sur la console. Actions plus complexes, longues, nécessitant une maintenance, des modifications \\(\\rightarrow\\) travailler à partir de la fenêtre éditeur. Les parties de code sont enchaînées et enregistrées sous la forme d’un fichier texte réutilisable par la suite. Toujours utiliser des commentaires. Permet de pouvoir mieux comprendre ce que l’on a fait lorsqu’on reprend un programme plus tard ou lorsqu’on le donne à quelqu’un. 3.8 Exercice : utiliser un script Recopier le script ci-dessous et changer les paramètres pour le re-exécuter plusieurs fois Sauvegarder ce script dans votre répertoire de travail Fermer RStudio, le rouvrir, et réexécuter le script # Supprimer toutes les variables existantes rm(list = ls()) # Création de mes variables taille et poids ; attention au point décimal poids &lt;- 91 taille &lt;- 1.87 # Calcul de l&#39;IMC : poids sur taille au carré imc &lt;- poids / (taille ^ 2) # Affichage du résultat print (imc) ## [1] 26.02305 "],
["mon-premier-jeu-de-donnees.html", "Chapitre 4 Mon premier jeu de données 4.1 Les types de valeurs dans R 4.2 Avant de manipuler le dataframe : installer et charger un package 4.3 Importation de données 4.4 Structure des données : le dataframe 4.5 Gérer le type des variables 4.6 Les valeurs particulières 4.7 Exercice : Importer les données et premier coup d’oeil", " Chapitre 4 Mon premier jeu de données 4.1 Les types de valeurs dans R Une valeur constitue l’unité de base des données pour R. Comme pour la plupart des logiciels, elles peuvent être de trois types : Numérique : entier, double Caractère : texte ou code Logique : booléens Ces valeurs sont ensuites structurées au sein de vecteurs qui sont compilés dans des dataframes. 4.2 Avant de manipuler le dataframe : installer et charger un package Pour manipuler notre base de données, nous allons nous servir de fonctionnalités présentes dans le package tidyverse. La première fois que l’on veut utiliser un package, il faut le télécharger sur notre ordinateur, avec install.packages() : install.packages(&quot;tidyverse&quot;) Puis à l’ouverture d’une session R, le charger (si on a besoin de ses fonctions), avec library() : library(&quot;tidyverse&quot;) Le package est prêt à être utilisé ! 4.3 Importation de données Conseil : exporter les données au format .csv ; c’est le format le plus interopérable (supporté par tous les logiciels stat). Utiliser ensuite la fonction read.csv après avoir défini le répertoire de travail (ou en donnant le chemin complet) base &lt;- read.csv (file = &quot;data/Base_synth_territoires.csv&quot;, header = T, sep = &quot;;&quot;, dec = &quot;,&quot;) header =indique la présence des noms de variable sur la première ligne sep = indique le séparateur de champ : ‘;’ ‘/t’ pour tabulation. dec = indique le séparateur de décimale (‘.’ par défaut) colClasses =permet de préciser le type de la données en entrée \\(\\Rightarrow\\) ?read.csv pour plus d’options Autres façons d’importer les données Fonction read_delim, du package readr, plus rapide Fonction fread, du package data.table, beaucoup plus rapide !! Pour importer les fichiers XLS, ODT ou DBF, il existe des fonctions et des packages spécifiques Le passage par un fichier csv est très recommandé 4.4 Structure des données : le dataframe n lignes (observations) p colonnes (variables) nrow (base) ## [1] 36689 ncol (base) ## [1] 38 dim (base) ## [1] 36689 38 4.5 Gérer le type des variables À chaque type de variable (numéric, factor,…) correspond une utilisation. Lors de l’import des données, un type est affecté automatiquement par R. Mais le type peut être erronné. Il suffit alors de les convertir : base &lt;- mutate(base, LIBGEO = as.character (LIBGEO)) ou as.factor(), as.numeric(), etc… Pour être sûr de ne pas faire de bêtise, il vaut mieux gérer les types au moment de l’importation avec le paramètre colClasses \\(\\rightarrow\\) exercice ! 4.6 Les valeurs particulières NA : Valeur manquante (Not Available) NaN : Pas un nombre (Not a Number, e.g., 0/0) -Inf, Inf : Inﬁni positif ou négatif, e.g. 1/0 V1 &lt;- c(1, 14, NA, 32.7) mean(V1) # renvoie NA. Not good ! ## [1] NA mean(V1, na.rm = T) # renvoie 15.9 - OK ! ## [1] 15.9 \\(\\Rightarrow\\) Le module 2 “Préparation des données” aborde la gestion de ces valeurs particulières. 4.7 Exercice : Importer les données et premier coup d’oeil On peut importer n’importe quel format de données en R (Excel, SAT, Stata, SQL…). Beaucoup sont abordés lors du module 2 “Préparation des données”. Pour ce module, nous ne voyons que l’importation de fichier .CSV. Si vous avez une base de données en Excel ou LibreOffice Calc, sauvegardez l’onglet que vous souhaitez en faisant “enregistrer sous” \\(\\rightarrow\\) “délimité CSV”. Ici, nous travaillerons sur une base de données communales fournie par l’Insee, dite “comparateur de territoires”. Le fichier source (Excel) figure dans le sous-répertoire “data” et contient toutes les métadonnées. Utiliser la fonction read.csv() pour importer ce fichier et stocker le dans un objet df. Veillez à ce que la région soit bien importée comme un facteur et non un entier. Inspecter le dataframe avec les fonctions vues auparavant df &lt;- read.csv(file = &quot;data/Base_synth_territoires.csv&quot;, sep = &quot;;&quot;, dec = &quot;,&quot;, colClasses = c(NA, &quot;NULL&quot;, &quot;character&quot;, &quot;NULL&quot;,&quot;NULL&quot;,&quot;NULL&quot;, NA, NA, NA, NA, rep(&quot;NULL&quot;, 28))) str(df) ## &#39;data.frame&#39;: 36689 obs. of 6 variables: ## $ CODGEO : Factor w/ 36689 levels &quot;01001&quot;,&quot;01002&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... ## $ REG : chr &quot;84&quot; &quot;84&quot; &quot;84&quot; &quot;84&quot; ... ## $ P14_POP : int 767 239 14022 1627 109 2570 743 338 1142 397 ... ## $ P09_POP : int 787 207 13350 1592 120 2328 660 336 960 352 ... ## $ SUPERF : num 15.95 9.15 24.6 15.92 5.88 ... ## $ NAIS0914: int 40 16 1051 117 8 175 59 12 56 25 ... On peut également gérer les problèmes d’encodage de caractères (si on passe de Windows à un système Unix, par exemple). head(df) ## CODGEO REG P14_POP P09_POP SUPERF NAIS0914 ## 1 01001 84 767 787 15.95 40 ## 2 01002 84 239 207 9.15 16 ## 3 01004 84 14022 13350 24.60 1051 ## 4 01005 84 1627 1592 15.92 117 ## 5 01006 84 109 120 5.88 8 ## 6 01007 84 2570 2328 33.55 175 tail(df) ## CODGEO REG P14_POP P09_POP SUPERF NAIS0914 ## 36684 97419 04 6722 6822 177.60 519 ## 36685 97420 04 22406 22437 57.84 1963 ## 36686 97421 04 7132 7406 103.82 661 ## 36687 97422 04 76796 72658 165.43 6663 ## 36688 97423 04 7198 7057 42.58 531 ## 36689 97424 04 5295 5989 84.40 430 names(df) ## [1] &quot;CODGEO&quot; &quot;REG&quot; &quot;P14_POP&quot; &quot;P09_POP&quot; &quot;SUPERF&quot; &quot;NAIS0914&quot; class(df) # la classe de l&#39;objet (du point de vue langage orienté objet) ## [1] &quot;data.frame&quot; typeof(df) # le type d&#39;objet du point de vue &quot;interne&quot; à R ## [1] &quot;list&quot; # Accéder a une variable directement (on obtient un vecteur), grâce à $ : df$CODGEO[1:10] # Captain crochet poweeeeerr !!! ## [1] 01001 01002 01004 01005 01006 01007 01008 01009 01010 01011 ## 36689 Levels: 01001 01002 01004 01005 01006 01007 01008 01009 01010 ... 97424 class(df$CODGEO) ## [1] &quot;factor&quot; typeof(df$CODGEO) ## [1] &quot;integer&quot; length(df) ## [1] 6 length(df$REG) ## [1] 36689 "],
["bien-commencer.html", "Chapitre 5 Bien commencer 5.1 Créer un projet sous Rstudio pour vous permettre de recencer vos travaux. 5.2 Intégrer vos données 5.3 Créer votre arborescence de projet 5.4 Activer les packages nécessaires 5.5 Bien structurer ses projets data", " Chapitre 5 Bien commencer 5.1 Créer un projet sous Rstudio pour vous permettre de recencer vos travaux. Pourquoi travailler avec les projets Rstudio plutôt que les scripts R ? Cela permet la portabilité : le répertoire de travail par défaut d’un projet est le répertoire où est ce projet. Si vous transmettez celui-ci à un collègue, le fait de lancer un programme ne dépend pas de l’arborescence de votre machine. Fini les setwd(&quot;chemin/qui/marche/uniquement/sur/mon/poste&quot;) ! Toujours sur la portabilité, un projet peut être utilisé avec un outil comme packrat qui va vous intégrer en interne au projet l’ensemble des packages nécessaires au projet. Cela permet donc à votre collègue à qui vous passez votre projet de ne pas avoir à les installer et, surtout, si vous mettez à jour votre environnement R, votre projet restera toujours avec les versions des packages avec lesquelles vous avez fait tourner votre projet à l’époque. Cela évite d’avoir à subir les effets d’une mise à jour importante d’un package qui casserait votre code. Pour activer packrat sur un projet, aller dans Tools/Project Options-&gt;Packrat En savoir plus sur Packrat Cela permet de se forcer à travailler en mode projet : on intègre à un seul endroit tout ce qui est lié à un projet : données brutes, données retravaillées, scripts, illustrations, documentations, publications… et donc y compris les packages avec packrat. On peut travailler sur plusieurs projets en même temps, Rstudio ouvre autant de sessions que de projets dans ce cas. Les projets Rstudio intègrent une interface avec les outils de gestion de version Git et SVN. Cela veut dire que vous pouvez versionniser votre projet et l’héberger simplement comme répertoire sur des plateformes de gestion de code telle que Github ou Gitlab. Pour créer un projet : Cliquez sur Project en haut à droite puis New Project. Cliquez sur New Directory. 5.2 Intégrer vos données Une bonne pratique est de créer un sous répertoire /data pour stocker les données sur lesquelles vous aurez à travailler. Vous pouvez le faire depuis l’explorateur de fichier de votre système d’exploitation ou directement à partir de l’explorateur de fichier de RStudio. Cela marche bien quand on a un seul type de données, mais en général on va avoir à travailler sur des données brutes que l’on va retravailler ensuite et vouloir stocker à part. Si par la suite vous souhaitez avoir des exemples de bonnes pratiques sur comment structurer vos données, vous pouvez vous référer au chapitre data du livre d’Hadley Wickham sur la construction de packages R (tout package R étant aussi un projet !). 5.3 Créer votre arborescence de projet Créer un répertoire /src ou vous mettrez vos scripts R. Créer un répertoire /figures ou vous mettrez vos illustrations issues de R. 5.4 Activer les packages nécessaires Commencer par rajouter un script dans le répertoire /src à votre projet qui commencera par : activer l’ensemble des packages nécessaires charger les données dont vous aurez besoin. library(tidyverse) library(GGally) library(plotly) base &lt;- read.csv (file = &quot;data/Base_synth_territoires.csv&quot;, header = T, sep = &quot;;&quot;, dec = &quot;,&quot;) 5.5 Bien structurer ses projets data Plusieurs documents peuvent vous inspirer sur la structuration de vos projets data par la suite. En voici quelques uns : https://github.com/pavopax/new-project-template https://nicercode.github.io/blog/2013-04-05-projects/ https://www.inwt-statistics.com/read-blog/a-meaningful-file-structure-for-r-projects.html http://projecttemplate.net/architecture.html A partir du moment où quelques grands principes sont respectés (un répertoire pour les données brutes en lecture seule par exemple), le reste est surtout une question d’attirance plus forte pour l’une ou l’autre solution. L’important est de vous tenir ensuite à conserver toujours la même arborescence dans vos projets afin de vous y retrouver plus simplement. "],
["premiere-manipulation-des-donnees.html", "Chapitre 6 Première manipulation des données 6.1 Afficher les valeurs et manipuler les variables 6.2 Créer de nouvelles variables 6.3 Sélectionner des variables 6.4 Filtrer des observations 6.5 Les tests logiques dans R 6.6 Renommer des colonnes 6.7 Exercice : Créer, filtrer, sélectionner", " Chapitre 6 Première manipulation des données require(&quot;dplyr&quot;) 6.1 Afficher les valeurs et manipuler les variables Pour afficher la table, plusieurs façons : “clic” dans l’environnement Rstudio, View(base), print(base), base. Pour accéder à une variable : fonction pull() Par exemple : str(pull(base, DEP)) ## Factor w/ 100 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 6.2 Créer de nouvelles variables La fonction mutate() permet de créer/modifier une variable (ou plusieurs). TableEnSortie &lt;- mutate(TableEnEntree, NouvelleVariable = DefinitionDeLaVariable) Par exemple : base &lt;- mutate(base, log_SUPERF = log(SUPERF)) Nb : mutate() permet également de modifier une variable. Dans ce cas la syntaxe est la même que ci-dessus, mais les noms d’entrée et de sortie sont les mêmes : base &lt;- mutate(base, log_SUPERF = 100 * log_SUPERF) \\(\\Rightarrow\\) La table base contient de nouvelles colonnes 6.3 Sélectionner des variables La fonction select() permet de sélectionner les variables voulues. sélection par liste blanche TableEnSortie &lt;- select(TableEnEntree, Variable1, Variable2, ..., VariableN) sélection par liste noire (supprimer) TableEnSortie &lt;- select(TableEnEntree, -Variable1, -Variable2, ..., -VariableN) Par exemple : base_select &lt;- select(base, CODGEO, LIBGEO, P14_POP) base_select &lt;- select(base, -CODGEO) 6.4 Filtrer des observations La fonction filter() permet de sélectionner les observations, selon une condition (ou plusieurs). TableEnSortie &lt;- filter(TableEnSortie, Condition1, ..., ConditionN) Par exemple : base_filter &lt;- filter(base, DEP == &quot;01&quot; &amp; P14_POP &gt; 10000) \\(\\Rightarrow\\) Attention à l’opérateur de comparaison : &quot; == &quot; et non pas “=” 6.5 Les tests logiques dans R Syntaxe Action == Test d’égalité != Différent de %in% c(…) Dans une liste de valeurs \\(&gt;, &gt;=\\) \\(&lt;, &lt;=\\) Supérieur (ou inférieur) (ou égal) ! (x %in% c(…)) N’est pas dans une liste de valeurs TableEnSortie &lt;- filter(TableEnSortie, x==a &amp; y==b) # x vaut a **ET** y vaut b TableEnSortie &lt;- filter(TableEnSortie, x==a | y==b) # x vaut a **OU** y vaut b (barre verticale AltGR+6) 6.6 Renommer des colonnes La fonction rename() permet de renommer une variable (ou plusieurs). base &lt;- rename(base, nouveau_nom = ancien_nom) Exemple base_rename &lt;- rename(base, ZONE_EMPLOI = ZE) 6.7 Exercice : Créer, filtrer, sélectionner En utilisant la fonction mutate(), créer une nouvelle variable correspondant à la densité de population (rapport de la population à la superficie de la commune), ainsi que les taux de natalité et de mortalité (en pour mille) A l’aide de la fonction select(), créer une nouvelle table en ne conservant que le code commune, le type de commune (ZAU), la région, le département et les variables que vous venez de créer. Enfin, ne conserver les communes correspondant à votre département de naissance et stocker ce dataframe. Attention au type de la variable département ! Avec les opérateurs logiques, faire des essais pour sélectionner des échantillons différents. df &lt;- mutate(base, densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = DECESD15 / P14_POP) selection &lt;- select(df, CODGEO, ZAU, REG, DEP, densite, tx_natal, tx_mort) S0 &lt;- filter(selection, DEP == &quot;62&quot;) S1 &lt;- filter(selection, DEP != &quot;62&quot;) # tout sauf le 62 :( S2 &lt;- filter(selection, DEP %in% c(&quot;59&quot;, &quot;62&quot;)) # L&#39;ancien NPdC :) S3 &lt;- filter(selection, !(DEP %in% c(&quot;59&quot;, &quot;62&quot;))) # Le &quot;sud&quot; de la France S4 &lt;- filter(selection, densite &gt; 100) # l&#39;urbain S5 &lt;- filter(selection, DEP == &quot;62&quot; &amp; densite &gt; 100) # le PdC urbain S6 &lt;- filter(selection, DEP == &quot;62&quot; | densite &gt; 100) # le PdC et l&#39;urbain Nom d’un pipe %&gt;% ! On peut combiner les opérations en une seule ligne à l’aide du pipe %&gt;% : selection_62 &lt;- select(df, CODGEO, ZAU, REG, DEP, densite, tx_natal) %&gt;% filter(DEP == &quot;62&quot;) "],
["premiers-traitements-statistiques.html", "Chapitre 7 Premiers traitements statistiques 7.1 Obtenir des informations 7.2 Calculer des statistiques spécifiques 7.3 Agréger des données 7.4 Tableau de contingence 7.5 Tableau de proportions 7.6 Exercice : calcul de statistiques", " Chapitre 7 Premiers traitements statistiques 7.1 Obtenir des informations La fonction summary() peut s’appliquer à une table entière ou un vecteur. Appliquée sur un tableau, elle donne les statistiques principales sur chacune des variables, en s’adaptant au type de celles-ci (numerique ou texte). base_extrait &lt;- select(base, 1, 3, 5, 7:12) summary(base_extrait) ## CODGEO REG ## 01001 : 1 Min. : 1.00 ## 01002 : 1 1st Qu.:28.00 ## 01004 : 1 Median :44.00 ## 01005 : 1 Mean :52.05 ## 01006 : 1 3rd Qu.:76.00 ## 01007 : 1 Max. :94.00 ## (Other):36683 ## ZAU ## 112 - Couronne d&#39;un grand p\\xf4le :12297 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les: 7383 ## 300 - Autre commune multipolaris\\xe9e : 7021 ## 120 - Multipolaris\\xe9e des grandes aires urbaines : 3962 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) : 3285 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) : 888 ## (Other) : 1853 ## P14_POP P09_POP SUPERF NAIS0914 ## Min. : 0 Min. : 0 Min. : 0.04 Min. : 0.0 ## 1st Qu.: 197 1st Qu.: 193 1st Qu.: 6.44 1st Qu.: 9.0 ## Median : 444 Median : 431 Median : 10.81 Median : 23.0 ## Mean : 1838 Mean : 1793 Mean : 17.64 Mean : 114.4 ## 3rd Qu.: 1110 3rd Qu.: 1072 3rd Qu.: 18.58 3rd Qu.: 60.0 ## Max. :2220445 Max. :2234105 Max. :18360.00 Max. :150843.0 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## DECE0914 P14_MEN ## Min. : 0.00 Min. : 0.0 ## 1st Qu.: 8.00 1st Qu.: 83.8 ## Median : 17.00 Median : 183.2 ## Mean : 77.35 Mean : 802.0 ## 3rd Qu.: 43.00 3rd Qu.: 454.9 ## Max. :69907.00 Max. :1147990.9 ## NA&#39;s :821 NA&#39;s :821 Les variables quantitatives summary(pull(base_extrait, NAIS0914)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.0 9.0 23.0 114.4 60.0 150843.0 821 Les variables qualitatives summary(pull(base_extrait, ZAU)) ## 111 - Grand p\\xf4le (plus de 10 000 emplois) ## 3285 ## 112 - Couronne d&#39;un grand p\\xf4le ## 12297 ## 120 - Multipolaris\\xe9e des grandes aires urbaines ## 3962 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) ## 456 ## 212 - Couronne d&#39;un moyen p\\xf4le ## 815 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) ## 888 ## 222 - Couronne d&#39;un petit p\\xf4le ## 582 ## 300 - Autre commune multipolaris\\xe9e ## 7021 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les ## 7383 7.2 Calculer des statistiques spécifiques Les fonctions sum(), mean(), median(), min(), max(), var(), sd()… résument l’information pour en donner une statistique. La fonction quantile() renvoie les quartiles de la variables (ou bien tout autre découpage qu’on lui renseigne). sum(pull(base_extrait, P14_POP), na.rm = T) ## [1] 65907160 mean(pull(base_extrait, P14_POP), na.rm = T) ## [1] 1837.492 median(pull(base_extrait, P14_POP), na.rm = T) ## [1] 444 quantile(pull(base_extrait, P14_POP), probs = c(0.25, 0.5, 0.75), na.rm = T) ## 25% 50% 75% ## 197 444 1110 Ces fonctions retournent une valeur, ou bien un ensemble de valeur (pour quantile()). Le résultat est donc un vecteur de un ou plusieurs nombres. 7.3 Agréger des données 7.3.1 Globalement La fonction summarise() permet d’aggréger des données, en appliquant une fonction sur les variables pour construire une statistique sur les observations de la table. C’est une fonction dite de “résumé”. summarise (TableEnEntree, NomVariableAgregee = Fonction(NomVariableEtude)) base_med &lt;- base_extrait %&gt;% summarise(population_med = median(P14_POP, na.rm = T)) La fonction summarise() retourne un data.frame. 7.3.2 Selon un facteur La fonction summarise() couplée à group_by() permet de calculer des statistiques pour chaque modalité d’une variable qualitative. Avec group_by(), on précise les variables qui formeront des groupes, sur lesquels on appliquera une fonction : TableauGroupes &lt;- group_by (TableEnEntree, Variable1, ..., VariableN) summarise (TableauGroupes, NomVariableAgregee = Fonction (NomVariableEtude)) Par exemple, si on veut avoir la médiane de la variable P14_POP, pour chaque ZAU et chaque région : base_reg_ann &lt;- group_by (base_extrait, ZAU, REG) %&gt;% summarise (population_med = median (P14_POP, na.rm = T)) 7.4 Tableau de contingence La fonction table() calcule les effectifs d’un tableau croisé : t &lt;- table(base_extrait$ZAU, base_extrait$REG) print(t) ## ## 1 2 3 4 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 17 16 3 10 ## 112 - Couronne d&#39;un grand p\\xf4le 6 0 3 3 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 1 4 0 4 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 0 3 2 2 ## 212 - Couronne d&#39;un moyen p\\xf4le 0 0 0 0 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 3 2 1 0 ## 222 - Couronne d&#39;un petit p\\xf4le 0 0 0 0 ## 300 - Autre commune multipolaris\\xe9e 2 4 0 1 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 3 5 13 4 ## ## 11 24 27 28 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 413 103 140 216 ## 112 - Couronne d&#39;un grand p\\xf4le 853 734 1299 1126 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 3 188 336 488 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 3 30 31 34 ## 212 - Couronne d&#39;un moyen p\\xf4le 2 72 122 104 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 0 46 60 78 ## 222 - Couronne d&#39;un petit p\\xf4le 0 19 137 29 ## 300 - Autre commune multipolaris\\xe9e 7 375 737 762 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 0 275 969 396 ## ## 32 44 52 53 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 481 322 108 89 ## 112 - Couronne d&#39;un grand p\\xf4le 1505 1721 535 415 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 729 822 186 152 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 33 54 23 47 ## 212 - Couronne d&#39;un moyen p\\xf4le 18 102 44 18 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 54 89 69 42 ## 222 - Couronne d&#39;un petit p\\xf4le 18 118 8 1 ## 300 - Autre commune multipolaris\\xe9e 711 1155 386 325 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 289 815 143 181 ## ## 75 76 84 93 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 333 258 548 220 ## 112 - Couronne d&#39;un grand p\\xf4le 1161 1124 1484 229 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 254 333 390 69 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 51 79 43 20 ## 212 - Couronne d&#39;un moyen p\\xf4le 81 155 84 11 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 163 123 113 32 ## 222 - Couronne d&#39;un petit p\\xf4le 81 89 47 6 ## 300 - Autre commune multipolaris\\xe9e 1002 877 517 107 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 1379 1527 963 269 ## ## 94 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 8 ## 112 - Couronne d&#39;un grand p\\xf4le 99 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 3 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 1 ## 212 - Couronne d&#39;un moyen p\\xf4le 2 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 13 ## 222 - Couronne d&#39;un petit p\\xf4le 29 ## 300 - Autre commune multipolaris\\xe9e 53 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 152 7.5 Tableau de proportions La fonction prop.table() prend en entrée un objet table (tableau de contingence avec les effectifs) et calcule les pourcentages (total, ligne, colonne) associés \\(\\rightarrow\\) ?prop.table (prop.table(t) * 100) %&gt;% round(digits = 1) ## ## 1 2 3 4 11 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 0.0 0.0 0.0 0.0 1.1 ## 112 - Couronne d&#39;un grand p\\xf4le 0.0 0.0 0.0 0.0 2.3 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 0.0 0.0 0.0 0.0 0.0 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 0.0 0.0 0.0 0.0 0.0 ## 212 - Couronne d&#39;un moyen p\\xf4le 0.0 0.0 0.0 0.0 0.0 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 0.0 0.0 0.0 0.0 0.0 ## 222 - Couronne d&#39;un petit p\\xf4le 0.0 0.0 0.0 0.0 0.0 ## 300 - Autre commune multipolaris\\xe9e 0.0 0.0 0.0 0.0 0.0 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 0.0 0.0 0.0 0.0 0.0 ## ## 24 27 28 32 44 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 0.3 0.4 0.6 1.3 0.9 ## 112 - Couronne d&#39;un grand p\\xf4le 2.0 3.5 3.1 4.1 4.7 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 0.5 0.9 1.3 2.0 2.2 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 0.1 0.1 0.1 0.1 0.1 ## 212 - Couronne d&#39;un moyen p\\xf4le 0.2 0.3 0.3 0.0 0.3 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 0.1 0.2 0.2 0.1 0.2 ## 222 - Couronne d&#39;un petit p\\xf4le 0.1 0.4 0.1 0.0 0.3 ## 300 - Autre commune multipolaris\\xe9e 1.0 2.0 2.1 1.9 3.1 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 0.7 2.6 1.1 0.8 2.2 ## ## 52 53 75 76 84 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 0.3 0.2 0.9 0.7 1.5 ## 112 - Couronne d&#39;un grand p\\xf4le 1.5 1.1 3.2 3.1 4.0 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 0.5 0.4 0.7 0.9 1.1 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 0.1 0.1 0.1 0.2 0.1 ## 212 - Couronne d&#39;un moyen p\\xf4le 0.1 0.0 0.2 0.4 0.2 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 0.2 0.1 0.4 0.3 0.3 ## 222 - Couronne d&#39;un petit p\\xf4le 0.0 0.0 0.2 0.2 0.1 ## 300 - Autre commune multipolaris\\xe9e 1.1 0.9 2.7 2.4 1.4 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 0.4 0.5 3.8 4.2 2.6 ## ## 93 94 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) 0.6 0.0 ## 112 - Couronne d&#39;un grand p\\xf4le 0.6 0.3 ## 120 - Multipolaris\\xe9e des grandes aires urbaines 0.2 0.0 ## 211 - Moyen p\\xf4le (5 000 \\xe0 10 000 emplois) 0.1 0.0 ## 212 - Couronne d&#39;un moyen p\\xf4le 0.0 0.0 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) 0.1 0.0 ## 222 - Couronne d&#39;un petit p\\xf4le 0.0 0.1 ## 300 - Autre commune multipolaris\\xe9e 0.3 0.1 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les 0.7 0.4 7.6 Exercice : calcul de statistiques Utilisez la fonction summary() pour obtenir un résumé de l’ensemble des variables de la table df Calculez maintenant les moyenne, médiane, écart-type et variance de la variable de densité de population. Que constatez-vous ? Utilisez le paramètre na.rm = T pour gérer les valeurs manquantes Calulez à présent les quartiles puis déciles de cette variables Calculez la version centrée réduite de la variable de densité. Rappel : on calcule la version centrée réduite d’une variable X en lui appliquant la transformation suivante : \\[ STD_X =\\dfrac{X-\\bar{X}}{\\sigma_X}\\] où \\(\\bar{X}\\) est la moyenne empirique de X et \\(\\sigma_X\\) son écart-type Tableaux croisés : Calculer le nombre de communes par type d’espace à l’aide de la fonction table, et le pourcentage associé Calculer le nombre de communes par région et type d’espace, et les pourcentages associés df &lt;- base %&gt;% select(1:24) %&gt;% mutate(densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = DECESD15 / P14_POP, ZAU2 = as.factor(substr(ZAU, 1, 3))) # Parce que la variable originale est longue summary(df) ## CODGEO LIBGEO REG DEP ## 01001 : 1 Sainte-Colombe: 13 Min. : 1.00 62 : 895 ## 01002 : 1 Beaulieu : 11 1st Qu.:28.00 02 : 816 ## 01004 : 1 Saint-Sauveur : 11 Median :44.00 80 : 782 ## 01005 : 1 Sainte-Marie : 11 Mean :52.05 76 : 745 ## 01006 : 1 Le Pin : 10 3rd Qu.:76.00 57 : 730 ## 01007 : 1 Saint-Aubin : 10 Max. :94.00 14 : 707 ## (Other):36683 (Other) :36623 (Other):32014 ## ZAU ## 112 - Couronne d&#39;un grand p\\xf4le :12297 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les: 7383 ## 300 - Autre commune multipolaris\\xe9e : 7021 ## 120 - Multipolaris\\xe9e des grandes aires urbaines : 3962 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) : 3285 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) : 888 ## (Other) : 1853 ## ZE P14_POP P09_POP ## 0061 - Toulouse : 717 Min. : 0 Min. : 0 ## 2307 - Rouen : 501 1st Qu.: 197 1st Qu.: 193 ## 2210 - Amiens : 479 Median : 444 Median : 431 ## 7310 - Tarbes - Lourdes: 455 Mean : 1838 Mean : 1793 ## 2102 - Troyes : 452 3rd Qu.: 1110 3rd Qu.: 1072 ## 2603 - Dijon : 448 Max. :2220445 Max. :2234105 ## (Other) :33637 NA&#39;s :821 NA&#39;s :821 ## SUPERF NAIS0914 DECE0914 ## Min. : 0.04 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 6.44 1st Qu.: 9.0 1st Qu.: 8.00 ## Median : 10.81 Median : 23.0 Median : 17.00 ## Mean : 17.64 Mean : 114.4 Mean : 77.35 ## 3rd Qu.: 18.58 3rd Qu.: 60.0 3rd Qu.: 43.00 ## Max. :18360.00 Max. :150843.0 Max. :69907.00 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_MEN NAISD15 DECESD15 ## Min. : 0.0 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 83.8 1st Qu.: 1.00 1st Qu.: 1.00 ## Median : 183.2 Median : 4.00 Median : 3.00 ## Mean : 802.0 Mean : 21.96 Mean : 16.47 ## 3rd Qu.: 454.9 3rd Qu.: 11.00 3rd Qu.: 9.00 ## Max. :1147990.9 Max. :28267.00 Max. :13997.00 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_LOG P14_RP P14_RSECOCC ## Min. : 0.0 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 115.0 1st Qu.: 83.8 1st Qu.: 7.00 ## Median : 239.1 Median : 183.2 Median : 19.00 ## Mean : 970.2 Mean : 802.0 Mean : 91.63 ## 3rd Qu.: 565.0 3rd Qu.: 454.9 3rd Qu.: 49.29 ## Max. :1362181.9 Max. :1147990.9 Max. :107061.99 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_LOGVAC P14_RP_PROP NBMENFISC13 ## Min. : 0.00 Min. : 0.0 Min. : 32.0 ## 1st Qu.: 8.00 1st Qu.: 68.4 1st Qu.: 102.0 ## Median : 18.00 Median : 148.0 Median : 205.0 ## Mean : 76.60 Mean : 462.2 Mean : 809.7 ## 3rd Qu.: 43.75 3rd Qu.: 349.2 3rd Qu.: 484.0 ## Max. :107129.02 Max. :381934.3 Max. :1038789.0 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :3793 ## PIMP13 MED13 TP6013 P14_EMPLT ## Min. :24.46 Min. :10021 Min. : 5.00 Min. : 0.0 ## 1st Qu.:50.57 1st Qu.:18452 1st Qu.: 8.73 1st Qu.: 26.0 ## Median :58.40 Median :19844 Median :11.97 Median : 66.8 ## Mean :58.98 Mean :20250 Mean :13.35 Mean : 733.9 ## 3rd Qu.:67.19 3rd Qu.:21563 3rd Qu.:16.80 3rd Qu.: 229.5 ## Max. :89.38 Max. :46251 Max. :44.84 Max. :1801865.8 ## NA&#39;s :31598 NA&#39;s :3793 NA&#39;s :32531 NA&#39;s :821 ## densite tx_natal tx_mort ZAU2 ## Min. : 0.00 Min. : 0.000 Min. :0.0000 112 :12297 ## 1st Qu.: 18.59 1st Qu.: 5.679 1st Qu.:0.0044 400 : 7383 ## Median : 40.35 Median : 9.264 Median :0.0079 300 : 7021 ## Mean : 160.15 Mean : 9.699 Mean :0.0093 120 : 3962 ## 3rd Qu.: 94.57 3rd Qu.: 12.931 3rd Qu.:0.0124 111 : 3285 ## Max. :27126.14 Max. :111.111 Max. :0.1577 221 : 888 ## NA&#39;s :821 NA&#39;s :827 NA&#39;s :827 (Other): 1853 df %&gt;% pull(densite) %&gt;% mean() df %&gt;% pull(densite) %&gt;% sd() df %&gt;% pull(densite) %&gt;% median() df %&gt;% pull(densite) %&gt;% var() On a des NA car les valeurs manquantes sont absorbantes ! df %&gt;% pull(densite) %&gt;% mean(na.rm = T) df %&gt;% pull(densite) %&gt;% sd(na.rm = T) df %&gt;% pull(densite) %&gt;% median(na.rm = T) df %&gt;% pull(densite) %&gt;% var(na.rm = T) df &lt;- df %&gt;% mutate(std_dens = (densite - mean(densite, na.rm = T)) / sd(densite, na.rm = T)) Avantage des variables centrées réduites : on élimine les effets d’unité (d’ordre de grandeur), et on peut donc comparer les distributions de deux variables qui ont des unités différentes (voir module 3) df %&gt;% pull(densite) %&gt;% quantile(na.rm = T) ## 0% 25% 50% 75% 100% ## 0.00000 18.59047 40.35457 94.57430 27126.14108 seq(0, 1, 0.1) # vérifier la séquence qu&#39;on souhaite ## [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 df %&gt;% pull(densite) %&gt;% quantile(probs = seq(0, 1, 0.1), na.rm = T) ## 0% 10% 20% 30% 40% 50% ## 0.00000 10.03439 15.65357 21.84208 29.76144 40.35457 ## 60% 70% 80% 90% 100% ## 54.82089 77.65199 119.08740 240.40789 27126.14108 t &lt;- table(df$ZAU2) t ## ## 111 112 120 211 212 221 222 300 400 ## 3285 12297 3962 456 815 888 582 7021 7383 100 * prop.table(t) %&gt;% round(digits = 4) ## ## 111 112 120 211 212 221 222 300 400 ## 8.95 33.52 10.80 1.24 2.22 2.42 1.59 19.14 20.12 Deux variables t &lt;- table(df$REG, df$ZAU2) t ## ## 111 112 120 211 212 221 222 300 400 ## 1 17 6 1 0 0 3 0 2 3 ## 2 16 0 4 3 0 2 0 4 5 ## 3 3 3 0 2 0 1 0 0 13 ## 4 10 3 4 2 0 0 0 1 4 ## 11 413 853 3 3 2 0 0 7 0 ## 24 103 734 188 30 72 46 19 375 275 ## 27 140 1299 336 31 122 60 137 737 969 ## 28 216 1126 488 34 104 78 29 762 396 ## 32 481 1505 729 33 18 54 18 711 289 ## 44 322 1721 822 54 102 89 118 1155 815 ## 52 108 535 186 23 44 69 8 386 143 ## 53 89 415 152 47 18 42 1 325 181 ## 75 333 1161 254 51 81 163 81 1002 1379 ## 76 258 1124 333 79 155 123 89 877 1527 ## 84 548 1484 390 43 84 113 47 517 963 ## 93 220 229 69 20 11 32 6 107 269 ## 94 8 99 3 1 2 13 29 53 152 100 * prop.table(t) %&gt;% round(digits = 4) ## ## 111 112 120 211 212 221 222 300 400 ## 1 0.05 0.02 0.00 0.00 0.00 0.01 0.00 0.01 0.01 ## 2 0.04 0.00 0.01 0.01 0.00 0.01 0.00 0.01 0.01 ## 3 0.01 0.01 0.00 0.01 0.00 0.00 0.00 0.00 0.04 ## 4 0.03 0.01 0.01 0.01 0.00 0.00 0.00 0.00 0.01 ## 11 1.13 2.32 0.01 0.01 0.01 0.00 0.00 0.02 0.00 ## 24 0.28 2.00 0.51 0.08 0.20 0.13 0.05 1.02 0.75 ## 27 0.38 3.54 0.92 0.08 0.33 0.16 0.37 2.01 2.64 ## 28 0.59 3.07 1.33 0.09 0.28 0.21 0.08 2.08 1.08 ## 32 1.31 4.10 1.99 0.09 0.05 0.15 0.05 1.94 0.79 ## 44 0.88 4.69 2.24 0.15 0.28 0.24 0.32 3.15 2.22 ## 52 0.29 1.46 0.51 0.06 0.12 0.19 0.02 1.05 0.39 ## 53 0.24 1.13 0.41 0.13 0.05 0.11 0.00 0.89 0.49 ## 75 0.91 3.16 0.69 0.14 0.22 0.44 0.22 2.73 3.76 ## 76 0.70 3.06 0.91 0.22 0.42 0.34 0.24 2.39 4.16 ## 84 1.49 4.04 1.06 0.12 0.23 0.31 0.13 1.41 2.62 ## 93 0.60 0.62 0.19 0.05 0.03 0.09 0.02 0.29 0.73 ## 94 0.02 0.27 0.01 0.00 0.01 0.04 0.08 0.14 0.41 Pour aller plus loin et ajouter des variables de pondération, calculer les profils-ligne ou profils-colonne, rendez-vous au module 3 “Statistiques descriptives”, ou demandez à votre GF (Gentil Formateur). "],
["premiers-graphiques.html", "Chapitre 8 Premiers graphiques 8.1 Package ggplot2 8.2 Histogramme 8.3 Nuages de points 8.4 Matrice de nuages 8.5 Bonus : faire un graphique “dynamique” 8.6 Exercices : créer des graphiques", " Chapitre 8 Premiers graphiques 8.1 Package ggplot2 Pour réaliser des graphiques, nous choisissons de nous servir du package ggplot2, qui permet de faire de meilleures réalisations que les fonctions basiques. Il est intégré dans le méta-package tidyverse donc il n’est pas utile de le re-charger dans notre session. Mais si vous devez le faire, le code est le suivant : install.packages(&quot;ggplot2&quot;) library(&quot;ggplot2&quot;) require(dplyr) La fonction ggplot() fonctionne d’une manière particulière. La structure ressemble à ceci : ggplot(TableEnEntree, aes(VariablesATracer)) + geom_FonctionAChoisir() Pour découvrir les nombreuses possibilités de ggplot2, vous pouvez vous référer au Module 5 : « Datavisualisation : produire des graphiques, des cartes et des tableaux » ou consulter les sites suivants : Version anglaise Version française La fonction aes() (pour “aesthetics”), utilisée dans l’instrution ggplot() permet de définir les données à tracer. On y indique les dimensions que l’on veut représenter sur le graphique. On peut représenter jusqu’à 5 dimensions sur un même graphique, mais attention à la lisibilité ! 2 variables quanti : x en fonction de y \\(\\rightarrow\\) 2 dimensions (nuage de points) taille du point \\(\\rightarrow\\) 3e dimension (quanti) couleur des points \\(\\rightarrow\\) 4e dimension (quali) juxtaposer des graphiques en fonction d’une variable quali \\(\\rightarrow\\) 5e dimension ! 8.2 Histogramme Si on désire un histogramme de log_SUPERF, on fera appel à la fonction geom_histogram(). Ce graphique ne présente qu’une seule dimension (la variable quanti dont on veut visualiser la distribution) rm(list = ls()) base &lt;- read.csv(file = &quot;data/Base_synth_territoires.csv&quot;, header = T, sep=&quot;;&quot;, dec=&quot;,&quot;) %&gt;% select(1:24) %&gt;% mutate(log_SUPERF = log (SUPERF), REG = as.factor (REG), densite = P14_POP / SUPERF, tx_natal = 1000 * NAISD15 / P14_POP, tx_mort = DECESD15 / P14_POP) ggplot(base, aes(x = log_SUPERF)) + geom_histogram() 8.3 Nuages de points Selon les graphiques que l’on veut tracer, on peut renseigner plusieurs variables. Dans le cas d’un nuage de points, par exemple, on croise 2 variables quantitatives : ggplot(base, aes(x = P14_EMPLT, y = MED13)) + geom_point(colour = &quot;blue&quot;) ggplot(base, aes(x = log (P14_EMPLT), y = log(MED13))) + geom_point(colour = &quot;blue&quot;) 8.4 Matrice de nuages Pour explorer son jeu de données, on peut réaliser un nuage de points pour plusieurs croisements de variables possibles. Ici, en conservant quelques variables quantitatives, on peut réaliser un ensemble de graphiques. Cette “matrice” de nuages fonctionne avec le package GGally. # install.packages(&quot;GGally&quot;) library(&quot;GGally&quot;) num &lt;- select(base, P14_LOGVAC:PIMP13) %&gt;% sample_n(10000) %&gt;% log() ggpairs(num) ## fonction ggpairs() de GGally 8.5 Bonus : faire un graphique “dynamique” Une fois qu’on a généré un graphique avec ggplot, on peut le passer dans la fonction ggplotly() (package plotly) qui permet de le rendre dynamique. library(plotly) g &lt;- ggplot(data = base, aes(x = REG, fill = REG)) + geom_bar() ggplotly(g) 8.6 Exercices : créer des graphiques A l’aide de l’aide mémoire ggplot2 : Réaliser un histogramme de la population communale Transformer les données avec la fonction log pour y voir plus clair Faire un barplot du nombre de communes par type ZAU Utiliser le paramètre fill de la fonction aes() pour améliorer le graphique Réaliser un graphique (nuage de points) croisant la densité de population et le taux de mortalité Ajouter une dimension supplémentaire avec la couleur des points (paramètre color de aes()) ggplot(data = base, aes(x = P14_POP)) + geom_histogram() Ce n’est pas très informatif, mais on peut faire une transformation log pour y voir plus clair ! ggplot(data = base, aes(x = log(P14_POP))) + geom_histogram() Faites maintenant un barplot (qui n’est pas un histogramme !!!! ) du nombre de communes par type ZAU ggplot(data = base, aes(x = REG)) + geom_bar() On va essayer d’y voir plus clair avec le paramètre fill ggplot(data = base, aes(x = REG, fill = REG)) + geom_bar() ggplot(data = base, aes(x = log(P14_POP), y = log(P14_LOGVAC))) + geom_point() ggplot(data = base, aes(x = densite, y = tx_mort, color = REG)) + geom_point() Là encore il faudrait faire une transformation logarithmique, mais tout ça est abordé dans le module 3 ! Note : avec les fonctions de base, on peut obtenir de nombreux graphiques avec très peu de code, mais moins jolis : plot(iris) Des possibilités infinies à approfondir dans les modules 3 et 5 !! "],
["sauvegarder-son-travail.html", "Chapitre 9 Sauvegarder son travail 9.1 Exportation des résultats 9.2 Environnement et .RData", " Chapitre 9 Sauvegarder son travail Après avoir réalisé ces traitements, on peut exporter son travail afin de le finaliser dans un tableur ou un traitement de texte en vue d’une publication ou autre. On peut donc avoir à exporter soit des tableaux qu’on retouchera par la suite, soit des images de ses graphiques qu’on intégrera dans un document. Une dernière possibilité consiste à sauvegarder un ensemble d’objets R dans un seul fichier (RData) afin de retrouver son environnement de travail facilement en rouvrant une session de R. 9.1 Exportation des résultats Exporter une table en csv res &lt;- summary(base) write.table(x = res, file = &#39;outputs/resultat_R.csv&#39;, sep = &#39;;&#39;, row.names = F) # row.names=F pour éviter un décalage entre première ligne et les suivantes write.table(x = base, file = &#39;outputs/base_R.csv&#39;, sep = &#39;;&#39;, row.names = F) Exporter un graphique pour l’intégrer à un document png(&#39;outputs/mongraphe.png&#39;) # Alloue et ouvre le fichier où inscrire le graphe ggplot(base, aes(x = P14_EMPLT, y = MED13)) + geom_point(colour = &quot;blue&quot;) dev.off() # Ferme le fichier \\(\\rightarrow\\) Beaucoup d’autres fonctions : jpeg, pdf, postscript, svg… 9.2 Environnement et .RData Il est possible de sauvegarder des objets R (dataframe, vecteur, etc…) directement sur son ordinateur. Une liste d’objets R est enregistrée sous le format .RData. save(list = ls(), file = &quot;outputs/env_entier.RData&quot;) # sauvegarde de tout l&#39;environnement sur le répertoire choisi rm(list = ls()) # suppression de notre environnement dans R load(&quot;outputs/env_entier.RData&quot;) # chargement de l&#39;environnement stocké sur l&#39;ordinateur save(base, V1, file = &quot;outputs/petit_env.RData&quot;) # sauvegarde des éléments base et V1 rm(list = ls()) # suppression de notre environnement load(outputs/&quot;petit_env.RData&quot;) Avantages - Un seul fichier peut contenir des dataframes, des graphiques, des fonctions, etc. - La lecture est très rapide \\(\\Rightarrow\\) utile pour les gros volumes "],
["aller-plus-loin-avec-les-objets-crochets-et-la-programmation-fonctionnelle.html", "Chapitre 10 Aller plus loin avec les objets, crochets et la programmation fonctionnelle 10.1 Les objets dans R 10.2 Sélectionner des lignes et des colonnes 10.3 Créer une nouvelle fonction en R 10.4 Les boucles conditionnelles 10.5 Les boucles 10.6 Exercices", " Chapitre 10 Aller plus loin avec les objets, crochets et la programmation fonctionnelle Ce qui a été présenté dans ce module repose sur les fonctions du package tidyverse. Cette approche tend à se généraliser depuis quelques années, mais quand on cherche la réponse à un problème sur Internet, on trouve d’autres façons de programmer en R, qui font appel aux fonctions du package base et non du tidyverse \\(\\Rightarrow\\) Cette partie donne quelques clés de compréhension. 10.1 Les objets dans R Rappel : en informatique, un objet est défini par : ses attributs et ses méthodes (fonctions). Dans l’exemple du jeu d’échec, chaque pièce peut être vue comme un objet : sa position sur le plateau constitue ses attributs sa façon de se déplacer peut être vue comme une fonction qui ne s’applique qu’à ce type de pièce, donc une méthode R est un langage orienté objet ; ces objets permettent de structurer les données selon leurs caractéristiques \\(\\Rightarrow\\) on retrouve les données dans les attributs. Les méthodes sont en général transparentes pour l’utilisateur (cf. utilisation des fonctions summary, plot…). Les objets les plus courants sont les suivants : Vecteurs : suite unidimensionnelle de valeurs ayant le même type. Facteurs : vecteur qui prend un nombre limité de modalités (exemple : sexe). Il est défini par les niveaux (levels) et les libellés associés (labels). Matrice et arrays : suites multidimensionnelles de valeurs (matrices=dimension 2 ; array=dimension n). Liste : ensemble d’objets différents. On peut stocker un vecteur alphanumérique + une matrice numérique dans une liste. Tableaux (data.frame) : Objet qui ressemble le plus aux tables Excel, SAS ou SPSS… : description d’individus statistiques (observations, en ligne) par des caractéristiques (variables, en colonnes). Fonctions : Objets particuliers qui donnent un résultat à partir de paramètres en entrée. Autres objets : Il existe un très grand nombre d’objets ad hoc dans R. Par exemple ts (time serie) pour les séries temporelles, lm (linear model) qui contient tous les résultats d’une régression linéraire… des graphiques On peut même en définir de nouveaux soi-même ! La fonction c permet de lister simplement les valeurs que l’on veut stocker dans l’objet ; la fonction seq génére une suite incrémentée. Il existe aussi la fonction rep qui réplique n fois la même valeur. 10.1.1 Créer des vecteurs v1 &lt;- seq(1 : 10) v2 &lt;- c (&quot;lundi&quot;, &quot;mardi&quot;, &quot;mercredi&quot;, &quot;jeudi&quot;, &quot;vendredi&quot;, &quot;samedi&quot;, &quot;dimanche&quot;) 10.1.2 Créer une matrice m &lt;- matrix (v1, nrow = 10, ncol = 7) l &lt;- list (v1, v2, m) 10.1.3 Visualiser ces objets et leurs attributs Quelques fonctions simples : print, View, names, colnames, rownames, typeof, str, dim v1 ## [1] 1 2 3 4 5 6 7 8 9 10 print (v2) ## [1] &quot;lundi&quot; &quot;mardi&quot; &quot;mercredi&quot; &quot;jeudi&quot; &quot;vendredi&quot; &quot;samedi&quot; ## [7] &quot;dimanche&quot; typeof (v2) # Permet de visualiser le type ## [1] &quot;character&quot; dim (m) ## [1] 10 7 str (l) # Permet de visualiser les attributs ## List of 3 ## $ : int [1:10] 1 2 3 4 5 6 7 8 9 10 ## $ : chr [1:7] &quot;lundi&quot; &quot;mardi&quot; &quot;mercredi&quot; &quot;jeudi&quot; ... ## $ : int [1:10, 1:7] 1 2 3 4 5 6 7 8 9 10 ... 10.2 Sélectionner des lignes et des colonnes Il est aussi possible d’accéder aux éléments d’un dataframe à partir du numéro de ligne et de colonne, grâce aux crochets : base[1,3] \\(\\rightarrow\\) valeur de la première ligne et de la troisième colonne base[2,] \\(\\rightarrow\\) toutes les variables pour la 2e observation base[,4] \\(\\rightarrow\\) toutes les observations de la quatrième colonne base[,’V6’] \\(\\rightarrow\\) toutes les observations de la variable V6 \\(\\Rightarrow\\) Utile pour sélectionner une partie d’une table : base[1:4, c(3, 6)] 10.3 Créer une nouvelle fonction en R La fonction est un objet comme les autres, qu’on crée avec l’opérateur d’affectation. Elle est définie par des paramètres et elle se termine par la fonction return(). On reprend l’exemple du calcul de l’IMC calcul_IMC &lt;- function (poids, taille) { ## La taille est exprimée en mètres imc &lt;- poids / taille ^ 2 return (imc) } calcul_IMC (poids = 80, taille = 1.89) ## [1] 22.39579 calcul_IMC (poids = 60, taille = 1.55) ## [1] 24.97399 10.4 Les boucles conditionnelles Les commandes if et else sont bien entendues utilisables. Le “then” n’existe pas : il est implicite après les accolades. diag_IMC &lt;- function(poids,taille) { imc &lt;- poids / taille ^ 2 if (imc &lt; 18.5) {diag &lt;- &quot;maigre&quot;} else if (imc &lt; 25) {diag &lt;- &quot;normal&quot;} else {diag &lt;- &quot;surpoids&quot;} return (diag) } diag_IMC (poids=60,taille=1.89) ## [1] &quot;maigre&quot; diag_IMC (poids=80,taille=1.89) ## [1] &quot;normal&quot; diag_IMC (poids=80,taille=1.55) ## [1] &quot;surpoids&quot; 10.5 Les boucles On peut utiliser les boucles classiques : repeat, while, for : for (pp in seq(from = 50, to = 100, by = 5)) { print(paste (&quot;Taille = 1,70m, poids =&quot;, pp, &quot;Diagnotic :&quot;, diag_IMC (poids = pp, taille = 1.70))) } ## [1] &quot;Taille = 1,70m, poids = 50 Diagnotic : maigre&quot; ## [1] &quot;Taille = 1,70m, poids = 55 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 60 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 65 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 70 Diagnotic : normal&quot; ## [1] &quot;Taille = 1,70m, poids = 75 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 80 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 85 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 90 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 95 Diagnotic : surpoids&quot; ## [1] &quot;Taille = 1,70m, poids = 100 Diagnotic : surpoids&quot; 10.6 Exercices 10.6.1 Vecteurs simples Créer trois vecteurs : un numérique, un caractère et un facteur. Vous pouvez vous aider des fonctions c(), rnorm() (génération d’une variable aléatoire selon une loi normale), seq() ou rep() Regrouper ces variables dans un dataframe, puis dans une liste. Dans les deux configurations, afficher la variable contenant les tailles (vtaille). Pour la liste, utiliser les [] et [[]]. rm (list = ls ()) x &lt;- c (1, 160, 2, 9, 60) x1 &lt;- c(&quot;Je&quot;, &quot;programme&quot;, &quot;en&quot;, &quot;R&quot;) # Guillemets pour indiquer que c&#39;est une variable textuelle y &lt;- seq (from = 1, to = 10, by = 1) z &lt;- rep (x = 1, times = 100) x &lt;- rnorm (n = 30) # création de vecteurs avec la fonction c() = combine v1 &lt;- c( 3, 4, 12, 15, 32, 6, 1, 2, 3, 9) # avec la fonction seq() = sequence, généralisation de la syntaxe ci-dessus v2 &lt;- seq(from = 1 , to = 15 , by = 1.5) # syntaxe équivalente mais préférable car plus lisible : v2b &lt;- seq (from=1, to=15, by=1.5) v3 &lt;- 1:10 # avec la fonction rep() = répétition v4 &lt;- rep (x = 4, times = 10) # ces commandes peuvent être combinées. Pratique pour créer des variables &quot;facteur&quot; v5 &lt;- rep (x = c(3, 4, 1.2, 8, 9), times = 2) v6 &lt;- rep (x = 1:5, times = 2) # vecteurs de type texte ou factor vtaille &lt;- rep (x = c (&quot;S&quot;, &quot;L&quot;), times = 5) vtaille &lt;- factor (vtaille) # concaténation de vecteurs gtaille &lt;- paste(&quot;X&quot;, vtaille, sep = &quot;&quot;) gtaille &lt;- factor (gtaille) toutes_taille &lt;- c (as.character (vtaille), as.character (gtaille)) toutes_taille &lt;- as.factor (toutes_taille) levels (toutes_taille) ## [1] &quot;L&quot; &quot;S&quot; &quot;XL&quot; &quot;XS&quot; 10.6.2 Dataframes et listes dataf &lt;- data.frame (vtaille, v1, v2, v3, v4, v5, v6) liste &lt;- list (vtaille, v1, v2, v3, v4, v5, v6) names(liste) &lt;- c (&quot;vtaille&quot;, &quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;, &quot;v4&quot;, &quot;v5&quot;, &quot;v6&quot;) dataf$vtaille ## [1] S L S L S L S L S L ## Levels: L S liste$vtaille ## [1] S L S L S L S L S L ## Levels: L S rm (dataf, vtaille, v1, v2, v2b, v3, v4, v5, v6) 10.6.3 Pour aller plus loin : matrices et arrays Les matrices et les arrays permettent des calculs rapides et efficaces, et peuvent être très pratiques et optimisent le stockage des données. Ils demandent cependant plus de réflexion en amont quant à leur utilisation, mais . On accède aux éléments avec les []. Créer une matrice à 10 lignes et 10 colonnes remplie avec un tirage aléatoire selon une loi normale centrée réduit. Créer un hypercube avec la fonction array() avec 10 lignes, 5 colonnes et de profondeur 3, toujours avec un tirage aléatoire selon une loi normale Un hypercube de trois dimensions peut être représenté comme suit : mat &lt;- matrix(rnorm(50), ncol = 5, nrow = 10) arr &lt;- array(rnorm(150),dim = c(10,5,3)) mat ## [,1] [,2] [,3] [,4] [,5] ## [1,] -0.1761491 1.10710527 0.1364170 -0.9058278 1.2434661 ## [2,] 0.1246561 0.86371410 -1.1455310 -2.6895842 -1.3717328 ## [3,] -0.2364240 -0.83954009 0.3708109 -1.0881803 -1.1853595 ## [4,] -0.5332330 0.23750192 0.9031544 -0.9965055 1.4160980 ## [5,] 0.8843318 0.51034856 -1.2558949 -1.8717066 -0.4960199 ## [6,] 2.2259689 -0.05813243 -1.2910566 0.9075880 1.2872530 ## [7,] -0.3126701 -1.63026992 2.2881545 -0.8269189 -0.6210060 ## [8,] 0.3724500 0.60173998 -0.4739469 1.2300564 0.2250284 ## [9,] 0.6038038 -0.42131171 -0.3548938 0.2076759 1.5610034 ## [10,] -0.5694043 1.13204225 -1.5225448 -1.7230668 3.3674807 arr ## , , 1 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.06604157 -1.3887187 0.36390614 0.08646963 0.19396942 ## [2,] -0.94120625 0.5217518 0.20886624 -1.10423342 -0.26846600 ## [3,] 1.02184262 1.2907487 -0.69573114 -0.24054719 -0.09494342 ## [4,] 0.31987050 1.5964806 -0.41309554 0.29193735 0.89795254 ## [5,] 0.96734149 -0.7737857 -0.43102231 -0.60907014 2.06857074 ## [6,] 0.07092895 0.6485579 0.17850175 0.13968071 0.87822211 ## [7,] -0.68611910 -0.1620054 -0.68904992 -0.18491894 0.41572435 ## [8,] -1.56433236 -1.5288995 0.78442033 1.35936551 0.09320210 ## [9,] -0.55658499 0.1373149 -0.06771349 0.26985254 -1.54991848 ## [10,] 0.46845553 0.5901355 -0.76291179 -1.37713853 -0.65513052 ## ## , , 2 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.2911227 1.26820786 -1.0793684 -0.0580834 -0.87825099 ## [2,] 1.3256060 1.01043560 2.9810194 -0.3113169 -0.02646994 ## [3,] 1.7742500 0.14205994 -0.2877273 0.2443206 -0.17887700 ## [4,] -1.2919442 0.08357093 1.2964463 0.5605437 0.32201853 ## [5,] -0.5706564 0.44340900 0.3874421 -0.6815495 0.86739682 ## [6,] -1.0772832 0.09125843 0.1925344 0.9045097 0.07123770 ## [7,] 0.5484728 -1.22177417 1.4185732 0.9416495 -0.29771218 ## [8,] -0.3450746 0.09162236 -0.1726679 -0.4711894 0.44686857 ## [9,] 1.9781917 -0.04509336 -0.9956879 -2.2239958 0.61538708 ## [10,] -1.8561299 1.46503285 0.6759476 -0.1583986 0.62692831 ## ## , , 3 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.1701205 -0.2569213 1.30732463 0.4746617 -0.147574918 ## [2,] 0.9049574 -0.7785414 -1.12532093 1.2807287 -0.536004686 ## [3,] 0.7625337 0.3241413 -0.09372508 1.1542293 -0.006663462 ## [4,] 0.1069927 -1.1161749 -0.28877406 0.6115146 -0.874876321 ## [5,] -0.1479844 -1.7075452 1.21945207 -0.4857231 -0.331662082 ## [6,] 1.3274858 -1.9376053 -1.20076985 -1.9421887 1.124372291 ## [7,] -1.8534878 0.4849323 -0.78457724 0.7931608 -2.016352420 ## [8,] -0.3032965 -0.6124394 -0.55187496 -0.5922327 -1.213235592 ## [9,] -0.5182560 -0.9820825 0.18924179 1.5311622 1.261056318 ## [10,] -1.2514150 -0.4626888 0.55008594 1.4036685 0.203256976 Pourquoi s’embêter avec ça ? Parce qu’on peut appliquer des fonctions facilement sur les lignes, colonnes et autres dimensions grâce à la fonction apply(). Exemple : résultats de validations croisées par bloc, simulations de loi selon différents paramètres. Et on calcule facilement des statistiques “marginales”. Par, exemple, sur une matrice, on peut calculer des statistiques par lignes : apply(mat, MARGIN = 1, FUN=mean) ## [1] 0.2810023 -0.8436956 -0.5957386 0.2054032 -0.4457882 0.6143242 ## [7] -0.2205421 0.3910656 0.3192555 0.1369014 Ou par colonnes : apply(mat, MARGIN = 2, FUN=mean) ## [1] 0.2383330 0.1503198 -0.2345331 -0.7756470 0.5426211 Sur notre hypercube de type array, on peut aussi calculer des stats sur ses différentes dimensions : apply (arr, MARGIN = 3, FUN=mean) ## [1] -0.01630863 0.17673625 -0.13869830 apply (arr, MARGIN = c(2,3), FUN = mean) ## [,1] [,2] [,3] ## [1,] -0.08337620 0.07765547 -0.08023496 ## [2,] 0.09315801 0.33287295 -0.70449252 ## [3,] -0.15238297 0.44165117 -0.07789377 ## [4,] -0.13686025 -0.12535101 0.42289813 ## [5,] 0.19791828 0.15685269 -0.25376839 Le coin du capitaine [ ] Le crochet, c’est comme le capitaine du même nom : personne ne l’aime, mais sans lui, pas de Peter Pan, pas de Neverland ! Moralité, on s’en sert beacoup pour pimenter les codes ! On peut utiliser les crochets pour accéder aux éléments des matrices/arrays et dataframe/listes. Matrices et arrays mat [1,1] ## [1] -0.1761491 mat [1,] ## [1] -0.1761491 1.1071053 0.1364170 -0.9058278 1.2434661 mat [,1] ## [1] -0.1761491 0.1246561 -0.2364240 -0.5332330 0.8843318 2.2259689 ## [7] -0.3126701 0.3724500 0.6038038 -0.5694043 arr [1,1,1] ## [1] 0.06604157 arr [1,,] ## [,1] [,2] [,3] ## [1,] 0.06604157 0.2911227 0.1701205 ## [2,] -1.38871870 1.2682079 -0.2569213 ## [3,] 0.36390614 -1.0793684 1.3073246 ## [4,] 0.08646963 -0.0580834 0.4746617 ## [5,] 0.19396942 -0.8782510 -0.1475749 arr [,,1] ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.06604157 -1.3887187 0.36390614 0.08646963 0.19396942 ## [2,] -0.94120625 0.5217518 0.20886624 -1.10423342 -0.26846600 ## [3,] 1.02184262 1.2907487 -0.69573114 -0.24054719 -0.09494342 ## [4,] 0.31987050 1.5964806 -0.41309554 0.29193735 0.89795254 ## [5,] 0.96734149 -0.7737857 -0.43102231 -0.60907014 2.06857074 ## [6,] 0.07092895 0.6485579 0.17850175 0.13968071 0.87822211 ## [7,] -0.68611910 -0.1620054 -0.68904992 -0.18491894 0.41572435 ## [8,] -1.56433236 -1.5288995 0.78442033 1.35936551 0.09320210 ## [9,] -0.55658499 0.1373149 -0.06771349 0.26985254 -1.54991848 ## [10,] 0.46845553 0.5901355 -0.76291179 -1.37713853 -0.65513052 dataframes et listes : Pour les dataframes, le fonctionnement est le même que pour les matrices. Pour les listes, une paire de crochet renvoie un résultat sous forme de liste, un double crochet renvoie le résultat sous sa forme naturelle (ex : vecteur ou matrice). str (liste [1]) ## List of 1 ## $ vtaille: Factor w/ 2 levels &quot;L&quot;,&quot;S&quot;: 2 1 2 1 2 1 2 1 2 1 str (liste [[1]]) ## Factor w/ 2 levels &quot;L&quot;,&quot;S&quot;: 2 1 2 1 2 1 2 1 2 1 liste[&quot;v6&quot;] ## $v6 ## [1] 1 2 3 4 5 1 2 3 4 5 liste[c(&quot;v6&quot;, &quot;v5&quot;)] ## $v6 ## [1] 1 2 3 4 5 1 2 3 4 5 ## ## $v5 ## [1] 3.0 4.0 1.2 8.0 9.0 3.0 4.0 1.2 8.0 9.0 Dans la syntaxe tidyverse, on ne met pas (obligatoirement) de guillemets pour les noms de variable, alors qu’on le fait pour la version [ ]. 10.6.4 Inspection d’un objet : la régression La régression linéaire consiste à exprimer une variable Y en fonction d’une variable X dans une fonction linéaire. C’est à dire qu’on cherche a et b tels que : \\[ Y = a \\cdot X + b + \\epsilon\\] où \\(\\epsilon\\) est le résidu de la régression. On utilise dans cet exemple la table des iris de Fisher, existant dans R base qu’il suffit d’appeler avec data(iris) (il existe d’autres dataframe inclus dans les packages et qui sont utilisés en exemple dans l’aide). data (&quot;iris&quot;) str (iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Faire la régression de la Sepal.Length sur Petal.length à l’aide de la fonction lm() lm (data = iris, formula = Sepal.Length ~ Petal.Length) ## ## Call: ## lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## ## Coefficients: ## (Intercept) Petal.Length ## 4.3066 0.4089 On a les paramètres a et b mais on aimerait en savoir plus… Au moins la qualité d’ajustement (le \\(R^2\\) par exemple), et un graphique des résidus pour détecter une éventuelle structure. Pour cela, stocker le résultat dans un nouvel objet, et explorez-le avec les fonctions str(), summary() et plot() reg &lt;- lm(data = iris, formula = Sepal.Length ~ Petal.Length) str (reg) ## List of 12 ## $ coefficients : Named num [1:2] 4.307 0.409 ## ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;(Intercept)&quot; &quot;Petal.Length&quot; ## $ residuals : Named num [1:150] 0.2209 0.0209 -0.1382 -0.32 0.1209 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ effects : Named num [1:150] -71.566 8.812 -0.155 -0.337 0.104 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;(Intercept)&quot; &quot;Petal.Length&quot; &quot;&quot; &quot;&quot; ... ## $ rank : int 2 ## $ fitted.values: Named num [1:150] 4.88 4.88 4.84 4.92 4.88 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ assign : int [1:2] 0 1 ## $ qr :List of 5 ## ..$ qr : num [1:150, 1:2] -12.2474 0.0816 0.0816 0.0816 0.0816 ... ## .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. ..$ : chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. .. ..$ : chr [1:2] &quot;(Intercept)&quot; &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;assign&quot;)= int [1:2] 0 1 ## ..$ qraux: num [1:2] 1.08 1.1 ## ..$ pivot: int [1:2] 1 2 ## ..$ tol : num 1e-07 ## ..$ rank : int 2 ## ..- attr(*, &quot;class&quot;)= chr &quot;qr&quot; ## $ df.residual : int 148 ## $ xlevels : Named list() ## $ call : language lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## $ terms :Classes &#39;terms&#39;, &#39;formula&#39; language Sepal.Length ~ Petal.Length ## .. ..- attr(*, &quot;variables&quot;)= language list(Sepal.Length, Petal.Length) ## .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 ## .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. ..$ : chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## .. .. .. ..$ : chr &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;order&quot;)= int 1 ## .. ..- attr(*, &quot;intercept&quot;)= int 1 ## .. ..- attr(*, &quot;response&quot;)= int 1 ## .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; ## .. ..- attr(*, &quot;predvars&quot;)= language list(Sepal.Length, Petal.Length) ## .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; ## .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## $ model :&#39;data.frame&#39;: 150 obs. of 2 variables: ## ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## ..- attr(*, &quot;terms&quot;)=Classes &#39;terms&#39;, &#39;formula&#39; language Sepal.Length ~ Petal.Length ## .. .. ..- attr(*, &quot;variables&quot;)= language list(Sepal.Length, Petal.Length) ## .. .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 ## .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. ..$ : chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## .. .. .. .. ..$ : chr &quot;Petal.Length&quot; ## .. .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;Petal.Length&quot; ## .. .. ..- attr(*, &quot;order&quot;)= int 1 ## .. .. ..- attr(*, &quot;intercept&quot;)= int 1 ## .. .. ..- attr(*, &quot;response&quot;)= int 1 ## .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; ## .. .. ..- attr(*, &quot;predvars&quot;)= language list(Sepal.Length, Petal.Length) ## .. .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; ## .. .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## - attr(*, &quot;class&quot;)= chr &quot;lm&quot; summary (reg) ## ## Call: ## lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.24675 -0.29657 -0.01515 0.27676 1.00269 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.30660 0.07839 54.94 &lt;2e-16 *** ## Petal.Length 0.40892 0.01889 21.65 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4071 on 148 degrees of freedom ## Multiple R-squared: 0.76, Adjusted R-squared: 0.7583 ## F-statistic: 468.6 on 1 and 148 DF, p-value: &lt; 2.2e-16 plot (reg) Les méthodes summary, print et plot sont implémentées pour tous les objets en R, et on peut les utiliser pour avoir un premier aperçu de ce que l’on obtient avec la fonction. "],
["exercices-1.html", "Chapitre 11 Exercices 11.1 Création et manipulation d’objets dans R 11.2 Premier jeu de données, premières statistiques 11.3 Mes premiers graphiques et statistiques", " Chapitre 11 Exercices 11.1 Création et manipulation d’objets dans R Ces exercices de mise en oeuvre des notions vues pendant la présentation se déroulent en deux parties : Manipulation des objets R sans recours à une base de données Importation d’une base de données à partir d’un fichier CSV et premières manipulations Premiers graphiques et statistiques. Par défaut, les résultats attendus sont affichés, et, si vous séchez, vous pouvez afficher le code les ayant généré en cliquant sur “code”. A tout moment, vous pouvez donc copier / coller le code dans l’éditeur de script ou la console pour exécuter les commandes présentées. Ces exercices nécessitent les packages de base et le package tidyverse, ce dernier regroupe un ensemble de fonctions à la syntaxe très simple. require(tidyverse) # ou library(tidyverse) 11.1.1 Génération de vecteurs Créez trois vecteurs : un numérique, un caractère et un facteur. Vous pouvez vous aider des fonctions c(), rnorm() (génération d’une variable aléatoire selon une loi normale), seq() ou rep() rm(list=ls()) x &lt;- c(1,160,2,9,60) x1 &lt;- c(&quot;Je&quot;,&quot;programme&quot;,&quot;en&quot;,&quot;R&quot;) # Guillemets pour indiquer que c&#39;est une variable textuelle y &lt;- seq(1,10) z &lt;- rep(1,100) x &lt;- rnorm(n = 30) # création de vecteurs avec la fonction c() = combine v1 &lt;- c(3,4,12,15,32,6,1,2,3,9) # avec la fonction seq() = sequence, g?n?ralisation de la syntaxe ci-dessus v2 &lt;- seq(1 , 15 , 1.5) # syntaxe équivalente mais préférable car plus lisible : v2b&lt;-seq(from=1 , to=15 , by=1.5) v3&lt;-1:10 # avec la fonction rep() = répétition v4&lt;-rep(4,10) # ces commandes peuvent être combinées. Pratique pour créer des variables &quot;facteur&quot; v5 &lt;- rep(c(3,4,1.2,8,9),2) v6 &lt;- rep(1:5,2) # vecteurs de type texte ou factor vtaille &lt;- rep(c(&quot;S&quot;,&quot;L&quot;),5) vtaille &lt;- factor(vtaille) # concaténation de vecteurs gtaille &lt;- paste(&quot;X&quot;,vtaille,sep=&quot;&quot;) gtaille &lt;- factor(gtaille) toutes_taille &lt;- c(as.character(vtaille),as.character(gtaille)) toutes_taille &lt;- as.factor(toutes_taille) levels(toutes_taille) ## [1] &quot;L&quot; &quot;S&quot; &quot;XL&quot; &quot;XS&quot; Regroupez ces variables dans un dataframe, puis dans une liste. Dans les deux configurations, affichez la variable contenant les tailles (vtaille). Pour la liste, vous pouvez utiliser les [] et [[]]. 11.1.2 Génération d’autres objets 11.1.2.1 Dataframes et listes dataf &lt;- data.frame(vtaille,v1,v2,v3,v4,v5,v6) liste &lt;- list(vtaille,v1,v2,v3,v4,v5,v6) names(liste) &lt;- c(&quot;vtaille&quot;,&quot;v1&quot;,&quot;v2&quot;,&quot;v3&quot;,&quot;v4&quot;,&quot;v5&quot;,&quot;v6&quot;) dataf$vtaille ## [1] S L S L S L S L S L ## Levels: L S liste$vtaille ## [1] S L S L S L S L S L ## Levels: L S rm(dataf,vtaille,v1,v2,v2b,v3,v4,v5,v6) 11.1.2.2 Pour aller plus loin : matrices et arrays Les matrices et les arrays permettent des calculs rapides et efficaces, peuvent être très pratiques et optimisent le stockage des données. Ils demandent cependant plus de réflexion en amont quant à leur utilisation. On accède aux éléments avec les []. Créer une matrice (10 lignes et 10 colonnes) remplie avec un tirage aléatoire selon une loi normale centrée réduit. Créer un hypercube avec la fonction array() avec 10 lignes, colonnes et de profondeur 3, toujours avec un tirage aléatoire selon une loi normale mat &lt;- matrix(rnorm(100),ncol = 10, nrow = 10) arr &lt;- array(rnorm(300),dim = c(10,10,3)) mat ## [,1] [,2] [,3] [,4] [,5] ## [1,] -1.1668148 -0.37194371 0.35909088 0.45604745 0.62652994 ## [2,] -0.7654835 0.70334553 -0.29209360 -0.52801258 -0.45688835 ## [3,] 1.0535126 0.92224383 -0.21628604 1.29139212 0.05540394 ## [4,] 0.5775071 1.22592990 0.01434252 -0.94803036 0.52431837 ## [5,] -0.3682580 0.01888541 0.52335891 -0.05993695 0.67377682 ## [6,] 1.3488179 0.16423602 -1.09304206 -0.65911862 -0.27426087 ## [7,] -0.6353964 -1.92631137 0.13415403 -0.19642909 -0.29306955 ## [8,] -1.3787006 -2.29833265 -1.52768926 -0.74171684 0.51173436 ## [9,] 0.5223252 0.72641076 1.11332617 -0.66154321 -0.34853018 ## [10,] 0.2292043 -1.04377772 1.24884961 -0.26368112 -1.04882779 ## [,6] [,7] [,8] [,9] [,10] ## [1,] -0.25114458 -0.37674299 -2.0069329 -0.5567037 1.57384731 ## [2,] -0.09621568 -0.04879119 0.3921953 -1.7840864 -1.04986590 ## [3,] -1.04385989 1.09025269 -1.0043721 0.2167243 -0.72811129 ## [4,] 0.11363523 2.36793231 -1.0706150 -0.7327805 0.54934555 ## [5,] -2.44968227 -0.68209920 -1.4616949 -0.8089500 1.39454810 ## [6,] -0.22263275 -0.43004987 0.5801985 -0.4319161 0.07120685 ## [7,] 0.33453183 0.39599042 -1.5074837 -0.1108551 0.09743687 ## [8,] 0.58001130 0.21846032 -2.1840274 1.0251032 0.08100335 ## [9,] -1.56189240 0.53791398 -1.8846160 1.3243582 -0.30075864 ## [10,] 0.55502271 -0.57914042 0.3510280 -0.9586585 -1.74554707 arr ## , , 1 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] -0.64810997 0.50610852 1.1580788751 -0.8907625 -0.9041530 ## [2,] 1.89750296 -2.69284287 -0.9091717614 0.8824361 -0.7343450 ## [3,] 1.87945857 -0.07604662 -0.7716924349 -0.8278418 -0.7078371 ## [4,] -1.39779288 0.48370185 0.8727945232 -1.8180118 0.7237828 ## [5,] 1.42886914 -0.59291664 1.6500939092 -0.8072695 0.3006400 ## [6,] -0.01239555 -0.59271532 -0.4129541308 1.7018485 -1.3225159 ## [7,] 0.82308273 -1.89435739 -0.0008847367 -0.6206826 -0.1159708 ## [8,] -0.79856689 -0.75323327 0.0509119448 0.5067581 0.3857684 ## [9,] 0.93453713 0.51310371 0.6036387243 0.2562968 -1.4664163 ## [10,] -0.98964748 1.41640315 -1.5953617117 -0.6909195 1.4829909 ## [,6] [,7] [,8] [,9] [,10] ## [1,] -0.132331966 1.8158166 0.18432186 0.150290832 -0.5356090 ## [2,] 0.021738369 -1.0620096 0.50807608 0.360196830 -0.1944699 ## [3,] 0.447696381 0.3567491 2.83431091 0.425756584 0.9358016 ## [4,] 0.163757604 -0.6027094 0.85170379 -0.145354809 -0.4055248 ## [5,] 0.007993071 1.8064799 -0.23369944 -0.183900519 0.2492360 ## [6,] -0.489598609 0.6820130 -0.47702184 0.435780075 1.6136186 ## [7,] 0.745228224 0.5509499 -0.02919208 0.009249592 -1.2417577 ## [8,] 0.747954026 0.9798451 0.09553124 0.353315351 1.1636904 ## [9,] -0.610491375 0.4944147 1.12749521 -0.537875468 -0.4423360 ## [10,] -0.320601360 -1.2389701 -0.83963199 0.402466987 -1.2551797 ## ## , , 2 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] -1.15613592 0.4291881 -0.24634700 0.57077726 -0.1294854 ## [2,] -0.96467128 0.3350432 -2.12132679 -0.68876309 0.5570157 ## [3,] -0.99812143 0.1194612 1.96162972 0.57033661 -0.1693984 ## [4,] -1.70040978 -0.6365936 0.36709024 -0.46399724 0.7551686 ## [5,] -2.01028922 -1.4451462 0.30747335 -0.83549100 1.6735140 ## [6,] -0.87983424 -1.0427065 1.28798845 0.24851929 1.3239347 ## [7,] -1.52383949 -0.3643798 -0.63113011 0.01151251 -0.9227565 ## [8,] -0.70396749 -1.2023264 -2.07082294 1.10576395 -0.6107792 ## [9,] 0.01207753 1.4040726 -0.07316968 0.84319061 1.1476445 ## [10,] 0.56060453 -0.2081346 -0.87300623 0.74952807 0.3591380 ## [,6] [,7] [,8] [,9] [,10] ## [1,] 0.26030790 -0.46221897 -0.48784072 0.5473542 1.0850548 ## [2,] -0.69966334 0.29804889 -0.17226963 -1.1876401 1.0166950 ## [3,] 0.07535823 -2.37038850 0.33196867 1.8487283 -0.2744132 ## [4,] 1.29597968 0.06765114 0.48243452 -0.3090307 -0.4246930 ## [5,] -0.04281557 0.51318729 -0.72635137 1.4840291 -0.1804528 ## [6,] 0.70069676 -0.27655402 -1.15846356 0.4672846 -0.6852035 ## [7,] -0.55018193 -0.28715587 0.39675423 0.1764311 1.1955450 ## [8,] -0.96502773 1.28767140 0.16274942 0.6800507 0.9263789 ## [9,] 1.61695440 0.76423101 -1.00826527 0.1865903 0.7423351 ## [10,] -0.98281647 -1.73116261 0.01671035 0.9012225 0.6442775 ## ## , , 3 ## ## [,1] [,2] [,3] [,4] [,5] ## [1,] -0.4218553 0.8693385841 -0.5951179 1.65903633 0.4253722 ## [2,] -0.4119074 0.2803410188 0.1302843 2.81086840 -0.5024949 ## [3,] 0.3770883 0.3393416591 0.1230568 1.22289228 0.5777282 ## [4,] -0.4257196 0.1800254186 0.8624554 0.39730457 0.2219989 ## [5,] 0.6721297 0.3148666167 -1.2646583 -0.05843567 0.7288978 ## [6,] -0.1338165 -1.2761580447 0.3433334 0.53140948 1.7514350 ## [7,] -2.3820474 -1.0305826943 0.9321114 0.41870069 -1.6492524 ## [8,] 1.1754017 -1.6210694897 0.7284234 -1.68628679 -0.9370988 ## [9,] 0.1147644 -0.0001654459 -0.1800167 1.21405203 1.5909407 ## [10,] -0.1051397 0.6622939994 0.5493556 3.32375882 0.4929237 ## [,6] [,7] [,8] [,9] [,10] ## [1,] 0.03231770 0.41355540 -0.229757521 0.5782774 -0.2983195 ## [2,] 0.14942030 1.03670732 -0.396104438 -0.4433469 -0.6923815 ## [3,] -0.59105968 -0.06618479 -0.155252723 -0.7645588 0.6447351 ## [4,] -0.96859186 0.57760401 -0.392628908 0.8952236 -1.3520397 ## [5,] 0.08490967 -1.53184044 -0.293685123 1.2112284 -0.1167564 ## [6,] 0.21611342 -0.08242755 -0.552392748 0.7649166 0.2475820 ## [7,] 2.40966862 -0.39067072 0.006208373 0.9655166 -0.6330572 ## [8,] -0.06345156 1.47731364 -1.259935778 0.3384633 -0.9598237 ## [9,] 1.53466000 -1.14697620 0.754861837 -1.0921760 0.2274139 ## [10,] -0.08400428 -1.10677103 -0.155080565 0.1698381 0.2312300 Pourquoi s’embêter avec ça ? Parce qu’on peut appliquer des fonctions facilement sur les lignes, colonnes et autres dimensions. Exemple : résultats de validations croisées par bloc, simulations de loi selon différents paramètres. Et on calcule facilement des statistiques “marginales”. apply(arr,MARGIN = 3,FUN=mean) ## [1] 0.04956604 -0.02782285 0.10488597 apply(arr,MARGIN = c(2,3),FUN = mean) ## [,1] [,2] [,3] ## [1,] 0.31169378 -0.93645868 -0.15411018 ## [2,] -0.36827949 -0.26115220 -0.12817684 ## [3,] 0.06454532 -0.20916210 0.16292275 ## [4,] -0.23081482 0.21113770 0.98333001 ## [5,] -0.23580560 0.39839959 0.27004501 ## [6,] 0.05813444 0.07087919 0.27199823 ## [7,] 0.37825790 -0.21966902 -0.08196904 ## [8,] 0.40218937 -0.21625734 -0.26737676 ## [9,] 0.12699255 0.47950201 0.26233824 ## [10,] -0.01125304 0.40455238 -0.27014171 Le coin du capitaine [ ] Le crochet, c’est comme le capitaine du même nom : personne ne l’aime, mais sans lui, pas de Peter Pan, pas de Neverland ! Moralité, on s’en sert beacoup pour pimenter les codes ! On peut utiliser les crochets pour accéder aux éléments des matrices/arrays et dataframe/listes. Matrices et arrays mat[1,1] ## [1] -1.166815 mat[1,] ## [1] -1.1668148 -0.3719437 0.3590909 0.4560474 0.6265299 -0.2511446 ## [7] -0.3767430 -2.0069329 -0.5567037 1.5738473 mat[,1] ## [1] -1.1668148 -0.7654835 1.0535126 0.5775071 -0.3682580 1.3488179 ## [7] -0.6353964 -1.3787006 0.5223252 0.2292043 arr[1,1,1] ## [1] -0.64811 arr[1,,] ## [,1] [,2] [,3] ## [1,] -0.6481100 -1.1561359 -0.4218553 ## [2,] 0.5061085 0.4291881 0.8693386 ## [3,] 1.1580789 -0.2463470 -0.5951179 ## [4,] -0.8907625 0.5707773 1.6590363 ## [5,] -0.9041530 -0.1294854 0.4253722 ## [6,] -0.1323320 0.2603079 0.0323177 ## [7,] 1.8158166 -0.4622190 0.4135554 ## [8,] 0.1843219 -0.4878407 -0.2297575 ## [9,] 0.1502908 0.5473542 0.5782774 ## [10,] -0.5356090 1.0850548 -0.2983195 arr[,,1] ## [,1] [,2] [,3] [,4] [,5] ## [1,] -0.64810997 0.50610852 1.1580788751 -0.8907625 -0.9041530 ## [2,] 1.89750296 -2.69284287 -0.9091717614 0.8824361 -0.7343450 ## [3,] 1.87945857 -0.07604662 -0.7716924349 -0.8278418 -0.7078371 ## [4,] -1.39779288 0.48370185 0.8727945232 -1.8180118 0.7237828 ## [5,] 1.42886914 -0.59291664 1.6500939092 -0.8072695 0.3006400 ## [6,] -0.01239555 -0.59271532 -0.4129541308 1.7018485 -1.3225159 ## [7,] 0.82308273 -1.89435739 -0.0008847367 -0.6206826 -0.1159708 ## [8,] -0.79856689 -0.75323327 0.0509119448 0.5067581 0.3857684 ## [9,] 0.93453713 0.51310371 0.6036387243 0.2562968 -1.4664163 ## [10,] -0.98964748 1.41640315 -1.5953617117 -0.6909195 1.4829909 ## [,6] [,7] [,8] [,9] [,10] ## [1,] -0.132331966 1.8158166 0.18432186 0.150290832 -0.5356090 ## [2,] 0.021738369 -1.0620096 0.50807608 0.360196830 -0.1944699 ## [3,] 0.447696381 0.3567491 2.83431091 0.425756584 0.9358016 ## [4,] 0.163757604 -0.6027094 0.85170379 -0.145354809 -0.4055248 ## [5,] 0.007993071 1.8064799 -0.23369944 -0.183900519 0.2492360 ## [6,] -0.489598609 0.6820130 -0.47702184 0.435780075 1.6136186 ## [7,] 0.745228224 0.5509499 -0.02919208 0.009249592 -1.2417577 ## [8,] 0.747954026 0.9798451 0.09553124 0.353315351 1.1636904 ## [9,] -0.610491375 0.4944147 1.12749521 -0.537875468 -0.4423360 ## [10,] -0.320601360 -1.2389701 -0.83963199 0.402466987 -1.2551797 dataframes et listes : Pour les dataframes, le fonctionnement est le même que pour les matrices. Pour les listes, une paire de crochet renvoie un résultat sous forme de liste, un double crochet renvoie le résultat sous sa forme naturelle (ex : vecteur ou matrice). str(liste[1]) ## List of 1 ## $ vtaille: Factor w/ 2 levels &quot;L&quot;,&quot;S&quot;: 2 1 2 1 2 1 2 1 2 1 str(liste[[1]]) ## Factor w/ 2 levels &quot;L&quot;,&quot;S&quot;: 2 1 2 1 2 1 2 1 2 1 11.1.3 Inspection d’un objet : la régression La régression linéaire consiste à exprimer une variable Y en fonction d’une variable X dans une fonction linéaire. C’est à dire qu’on cherche a et b tels que : \\[ Y = a \\cdot X + b + \\epsilon\\] où \\(\\epsilon\\) est le résidu de la régression. On utilise dans cet exemple la table des iris de Fisher, existant dans R base qu’il suffit d’appeler avec data(iris) (il existe d’autres dataframe inclus dans les packages et qui sont utilisés en exemple dans l’aide). data(&quot;iris&quot;) str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Faire la régression de la Sepal.Length sur Petal.length à l’aide de la fonction lm() lm(data=iris,formula = Sepal.Length~Petal.Length) ## ## Call: ## lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## ## Coefficients: ## (Intercept) Petal.Length ## 4.3066 0.4089 On a les paramètres a et b mais on aimerait en savoir plus… Au moins la qualité d’ajustement (le \\(R^2\\) par exemple), et un graphique des résidus pour détecter une éventuelle structure. Pour cela, stocker le résultat dans un nouvel objet, et explorez-le avec les fonctions str(), summary() et plot() reg &lt;- lm(data=iris,formula = Sepal.Length~Petal.Length) str(reg) ## List of 12 ## $ coefficients : Named num [1:2] 4.307 0.409 ## ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;(Intercept)&quot; &quot;Petal.Length&quot; ## $ residuals : Named num [1:150] 0.2209 0.0209 -0.1382 -0.32 0.1209 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ effects : Named num [1:150] -71.566 8.812 -0.155 -0.337 0.104 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;(Intercept)&quot; &quot;Petal.Length&quot; &quot;&quot; &quot;&quot; ... ## $ rank : int 2 ## $ fitted.values: Named num [1:150] 4.88 4.88 4.84 4.92 4.88 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ assign : int [1:2] 0 1 ## $ qr :List of 5 ## ..$ qr : num [1:150, 1:2] -12.2474 0.0816 0.0816 0.0816 0.0816 ... ## .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. ..$ : chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. .. ..$ : chr [1:2] &quot;(Intercept)&quot; &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;assign&quot;)= int [1:2] 0 1 ## ..$ qraux: num [1:2] 1.08 1.1 ## ..$ pivot: int [1:2] 1 2 ## ..$ tol : num 1e-07 ## ..$ rank : int 2 ## ..- attr(*, &quot;class&quot;)= chr &quot;qr&quot; ## $ df.residual : int 148 ## $ xlevels : Named list() ## $ call : language lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## $ terms :Classes &#39;terms&#39;, &#39;formula&#39; language Sepal.Length ~ Petal.Length ## .. ..- attr(*, &quot;variables&quot;)= language list(Sepal.Length, Petal.Length) ## .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 ## .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. ..$ : chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## .. .. .. ..$ : chr &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;Petal.Length&quot; ## .. ..- attr(*, &quot;order&quot;)= int 1 ## .. ..- attr(*, &quot;intercept&quot;)= int 1 ## .. ..- attr(*, &quot;response&quot;)= int 1 ## .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; ## .. ..- attr(*, &quot;predvars&quot;)= language list(Sepal.Length, Petal.Length) ## .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; ## .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## $ model :&#39;data.frame&#39;: 150 obs. of 2 variables: ## ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## ..- attr(*, &quot;terms&quot;)=Classes &#39;terms&#39;, &#39;formula&#39; language Sepal.Length ~ Petal.Length ## .. .. ..- attr(*, &quot;variables&quot;)= language list(Sepal.Length, Petal.Length) ## .. .. ..- attr(*, &quot;factors&quot;)= int [1:2, 1] 0 1 ## .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. ..$ : chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## .. .. .. .. ..$ : chr &quot;Petal.Length&quot; ## .. .. ..- attr(*, &quot;term.labels&quot;)= chr &quot;Petal.Length&quot; ## .. .. ..- attr(*, &quot;order&quot;)= int 1 ## .. .. ..- attr(*, &quot;intercept&quot;)= int 1 ## .. .. ..- attr(*, &quot;response&quot;)= int 1 ## .. .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; ## .. .. ..- attr(*, &quot;predvars&quot;)= language list(Sepal.Length, Petal.Length) ## .. .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:2] &quot;numeric&quot; &quot;numeric&quot; ## .. .. .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;Sepal.Length&quot; &quot;Petal.Length&quot; ## - attr(*, &quot;class&quot;)= chr &quot;lm&quot; summary(reg) ## ## Call: ## lm(formula = Sepal.Length ~ Petal.Length, data = iris) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.24675 -0.29657 -0.01515 0.27676 1.00269 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.30660 0.07839 54.94 &lt;2e-16 *** ## Petal.Length 0.40892 0.01889 21.65 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4071 on 148 degrees of freedom ## Multiple R-squared: 0.76, Adjusted R-squared: 0.7583 ## F-statistic: 468.6 on 1 and 148 DF, p-value: &lt; 2.2e-16 plot(reg) Les méthodes summary, print et plot sont implémentées pour tous les objets en R, et on peut les utiliser pour avoir un premier aperçu de ce que l’on obtient avec la fonction. 11.2 Premier jeu de données, premières statistiques 11.2.1 Importer les données et premier coup d’oeil On peut importer n’importe quel format de données en R (excel, sas, stata, SQL…) et ceci est abordé dans le module 2. Pour ce module, nous ne voyons que l’importation de fichier .CSV. Si vous avez une base de données en excel ou libreOffice, sauvegardez l’onglet que vous souhaitez en faisant “enregistrer sous” \\(\\rightarrow\\) “délimité CSV”. Ici, nous travaillerons sur une base de données communales fournies par l’Insee, dite “comparateur de territoires”. Le fichier (excel) source figure sous le répertoire “data” et contient toutes les métadonnées ; nous avons ajouté une colonne correspondant au type ZAU de la commune concernée. Utilisez la fonction read.csv pour importer ce fichier et stockez le dans un objet df. Veillez à ce que la région soit bien importée comme un facteur et non un entier. Inspectez ce nouvel objet. df &lt;- read.csv(file = &quot;./data/Base_synth_territoires.csv&quot;,sep=&quot;;&quot;,dec=&quot;,&quot;) str(df) ## &#39;data.frame&#39;: 36689 obs. of 38 variables: ## $ CODGEO : Factor w/ 36689 levels &quot;01001&quot;,&quot;01002&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... ## $ LIBGEO : Factor w/ 34174 levels &quot;\\xc8ve&quot;,&quot;\\xc8vres&quot;,..: 13683 13685 813 815 832 855 859 954 1011 1173 ... ## $ REG : int 84 84 84 84 84 84 84 84 84 84 ... ## $ DEP : Factor w/ 100 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ ZAU : Factor w/ 9 levels &quot;111 - Grand p\\xf4le (plus de 10 000 emplois)&quot;,..: 3 2 2 2 8 2 2 5 8 2 ... ## $ ZE : Factor w/ 321 levels &quot;0050 - Mont-de-Marsan&quot;,..: 260 248 248 260 263 248 248 263 266 250 ... ## $ P14_POP : int 767 239 14022 1627 109 2570 743 338 1142 397 ... ## $ P09_POP : int 787 207 13350 1592 120 2328 660 336 960 352 ... ## $ SUPERF : num 15.95 9.15 24.6 15.92 5.88 ... ## $ NAIS0914 : int 40 16 1051 117 8 175 59 12 56 25 ... ## $ DECE0914 : int 25 7 551 41 3 78 20 11 32 10 ... ## $ P14_MEN : num 306 99.3 6161.1 621.1 52.5 ... ## $ NAISD15 : int 13 5 222 15 2 21 11 2 18 4 ... ## $ DECESD15 : int 5 1 121 7 2 9 3 3 5 0 ... ## $ P14_LOG : num 342.7 161.2 6838.4 661.8 71.5 ... ## $ P14_RP : num 306 99.3 6161.1 621.1 52.5 ... ## $ P14_RSECOCC : num 14 47.3 121.6 10.9 10.9 ... ## $ P14_LOGVAC : num 22.74 14.55 555.64 29.85 8.14 ... ## $ P14_RP_PROP : num 260 84.6 2769 473.3 37.7 ... ## $ NBMENFISC13 : int 297 99 6034 617 47 1014 299 140 431 137 ... ## $ PIMP13 : num NA NA 57.4 NA NA ... ## $ MED13 : num 22130 23213 19554 22388 21872 ... ## $ TP6013 : num NA NA 15.1 NA NA ... ## $ P14_EMPLT : num 85.16 12.81 7452.93 280.57 5.95 ... ## $ P14_EMPLT_SAL: num 52.19 4.95 6743.37 206.38 3.96 ... ## $ P09_EMPLT : num 65.57 17.64 7551.68 286.61 5.29 ... ## $ P14_POP1564 : num 463 141.6 8962.8 1043.1 71.3 ... ## $ P14_CHOM1564 : num 33 9.84 1059.73 66.33 7.93 ... ## $ P14_ACT1564 : num 376 121 6681.9 842.1 57.5 ... ## $ ETTOT14 : int 47 22 1316 141 7 203 66 39 54 36 ... ## $ ETAZ14 : int 9 1 7 14 0 21 2 5 5 6 ... ## $ ETBE14 : int 2 3 60 7 0 18 0 2 6 4 ... ## $ ETFZ14 : int 5 1 131 19 0 21 9 1 13 3 ... ## $ ETGU14 : int 25 14 892 85 5 114 45 27 24 18 ... ## $ ETGZ14 : int 6 4 283 19 1 28 16 6 9 7 ... ## $ ETOQ14 : int 6 3 226 16 2 29 10 4 6 5 ... ## $ ETTEF114 : int 9 2 385 27 0 38 17 6 9 7 ... ## $ ETTEFP1014 : int 0 0 109 5 0 15 2 0 3 0 ... df &lt;- read.csv(file = &quot;./data/Base_synth_territoires.csv&quot;,sep=&quot;;&quot;,dec=&quot;,&quot;,colClasses = c(&quot;REG&quot;=&quot;factor&quot;)) str(df) ## &#39;data.frame&#39;: 36689 obs. of 38 variables: ## $ CODGEO : Factor w/ 36689 levels &quot;01001&quot;,&quot;01002&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... ## $ LIBGEO : Factor w/ 34174 levels &quot;\\xc8ve&quot;,&quot;\\xc8vres&quot;,..: 13683 13685 813 815 832 855 859 954 1011 1173 ... ## $ REG : Factor w/ 17 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 15 15 15 15 15 15 15 15 15 15 ... ## $ DEP : Factor w/ 100 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ ZAU : Factor w/ 9 levels &quot;111 - Grand p\\xf4le (plus de 10 000 emplois)&quot;,..: 3 2 2 2 8 2 2 5 8 2 ... ## $ ZE : Factor w/ 321 levels &quot;0050 - Mont-de-Marsan&quot;,..: 260 248 248 260 263 248 248 263 266 250 ... ## $ P14_POP : int 767 239 14022 1627 109 2570 743 338 1142 397 ... ## $ P09_POP : int 787 207 13350 1592 120 2328 660 336 960 352 ... ## $ SUPERF : num 15.95 9.15 24.6 15.92 5.88 ... ## $ NAIS0914 : int 40 16 1051 117 8 175 59 12 56 25 ... ## $ DECE0914 : int 25 7 551 41 3 78 20 11 32 10 ... ## $ P14_MEN : num 306 99.3 6161.1 621.1 52.5 ... ## $ NAISD15 : int 13 5 222 15 2 21 11 2 18 4 ... ## $ DECESD15 : int 5 1 121 7 2 9 3 3 5 0 ... ## $ P14_LOG : num 342.7 161.2 6838.4 661.8 71.5 ... ## $ P14_RP : num 306 99.3 6161.1 621.1 52.5 ... ## $ P14_RSECOCC : num 14 47.3 121.6 10.9 10.9 ... ## $ P14_LOGVAC : num 22.74 14.55 555.64 29.85 8.14 ... ## $ P14_RP_PROP : num 260 84.6 2769 473.3 37.7 ... ## $ NBMENFISC13 : int 297 99 6034 617 47 1014 299 140 431 137 ... ## $ PIMP13 : num NA NA 57.4 NA NA ... ## $ MED13 : num 22130 23213 19554 22388 21872 ... ## $ TP6013 : num NA NA 15.1 NA NA ... ## $ P14_EMPLT : num 85.16 12.81 7452.93 280.57 5.95 ... ## $ P14_EMPLT_SAL: num 52.19 4.95 6743.37 206.38 3.96 ... ## $ P09_EMPLT : num 65.57 17.64 7551.68 286.61 5.29 ... ## $ P14_POP1564 : num 463 141.6 8962.8 1043.1 71.3 ... ## $ P14_CHOM1564 : num 33 9.84 1059.73 66.33 7.93 ... ## $ P14_ACT1564 : num 376 121 6681.9 842.1 57.5 ... ## $ ETTOT14 : int 47 22 1316 141 7 203 66 39 54 36 ... ## $ ETAZ14 : int 9 1 7 14 0 21 2 5 5 6 ... ## $ ETBE14 : int 2 3 60 7 0 18 0 2 6 4 ... ## $ ETFZ14 : int 5 1 131 19 0 21 9 1 13 3 ... ## $ ETGU14 : int 25 14 892 85 5 114 45 27 24 18 ... ## $ ETGZ14 : int 6 4 283 19 1 28 16 6 9 7 ... ## $ ETOQ14 : int 6 3 226 16 2 29 10 4 6 5 ... ## $ ETTEF114 : int 9 2 385 27 0 38 17 6 9 7 ... ## $ ETTEFP1014 : int 0 0 109 5 0 15 2 0 3 0 ... Inspectez le dataframe avec les fonctions vues en cours… et plus ! dim(df) ## [1] 36689 38 head(df) ## CODGEO LIBGEO REG DEP ## 1 01001 L&#39;Abergement-Cl\\xe9menciat 84 01 ## 2 01002 L&#39;Abergement-de-Varey 84 01 ## 3 01004 Amb\\xe9rieu-en-Bugey 84 01 ## 4 01005 Amb\\xe9rieux-en-Dombes 84 01 ## 5 01006 Ambl\\xe9on 84 01 ## 6 01007 Ambronay 84 01 ## ZAU ## 1 120 - Multipolaris\\xe9e des grandes aires urbaines ## 2 112 - Couronne d&#39;un grand p\\xf4le ## 3 112 - Couronne d&#39;un grand p\\xf4le ## 4 112 - Couronne d&#39;un grand p\\xf4le ## 5 300 - Autre commune multipolaris\\xe9e ## 6 112 - Couronne d&#39;un grand p\\xf4le ## ZE P14_POP P09_POP SUPERF NAIS0914 ## 1 8213 - Villefranche-sur-Sa\\xf4ne 767 787 15.95 40 ## 2 8201 - Amb\\xe9rieu-en-Bugey 239 207 9.15 16 ## 3 8201 - Amb\\xe9rieu-en-Bugey 14022 13350 24.60 1051 ## 4 8213 - Villefranche-sur-Sa\\xf4ne 1627 1592 15.92 117 ## 5 8216 - Chamb\\xe9ry 109 120 5.88 8 ## 6 8201 - Amb\\xe9rieu-en-Bugey 2570 2328 33.55 175 ## DECE0914 P14_MEN NAISD15 DECESD15 P14_LOG P14_RP P14_RSECOCC ## 1 25 306.00000 13 5 342.73473 306.00000 13.99418 ## 2 7 99.33745 5 1 161.16023 99.33745 47.27625 ## 3 551 6161.06200 222 121 6838.35437 6161.06200 121.64795 ## 4 41 621.05374 15 7 661.76017 621.05374 10.85505 ## 5 3 52.51818 2 2 71.51818 52.51818 10.85714 ## 6 78 1028.00000 21 9 1160.00000 1028.00000 56.00000 ## P14_LOGVAC P14_RP_PROP NBMENFISC13 PIMP13 MED13 TP6013 ## 1 22.740550 260.00000 297 NA 22130.00 NA ## 2 14.546538 84.58436 99 NA 23213.00 NA ## 3 555.644416 2769.00170 6034 57.41294 19554.00 15.11508 ## 4 29.851387 473.32736 617 NA 22387.62 NA ## 5 8.142857 37.65455 47 NA 21871.67 NA ## 6 76.000000 779.00000 1014 62.35178 21650.67 NA ## P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 P14_CHOM1564 ## 1 85.157286 52.191539 65.566193 463.00000 33.000000 ## 2 12.814642 4.946329 17.644456 141.62963 9.835391 ## 3 7452.926728 6743.374287 7551.682296 8962.84216 1059.728437 ## 4 280.569953 206.382233 286.611037 1043.12909 66.326127 ## 5 5.945455 3.963636 5.285714 71.34545 7.927273 ## 6 487.730918 372.758450 491.138876 1614.00000 108.000000 ## P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ETOQ14 ETTEF114 ## 1 376.00000 47 9 2 5 25 6 6 9 ## 2 120.97531 22 1 3 1 14 4 3 2 ## 3 6681.86216 1316 7 60 131 892 283 226 385 ## 4 842.14083 141 14 7 19 85 19 16 27 ## 5 57.47273 7 0 0 0 5 1 2 0 ## 6 1267.00000 203 21 18 21 114 28 29 38 ## ETTEFP1014 ## 1 0 ## 2 0 ## 3 109 ## 4 5 ## 5 0 ## 6 15 tail(df) ## CODGEO LIBGEO REG DEP ## 36684 97419 Sainte-Rose 04 974 ## 36685 97420 Sainte-Suzanne 04 974 ## 36686 97421 Salazie 04 974 ## 36687 97422 Le Tampon 04 974 ## 36688 97423 Les Trois-Bassins 04 974 ## 36689 97424 Cilaos 04 974 ## ZAU ZE ## 36684 400 - Commune isol\\xe9e hors influence des p\\xf4les 0401 - L&#39;Est ## 36685 112 - Couronne d&#39;un grand p\\xf4le 0402 - Le Nord ## 36686 400 - Commune isol\\xe9e hors influence des p\\xf4les 0401 - L&#39;Est ## 36687 111 - Grand p\\xf4le (plus de 10 000 emplois) 0404 - Le Sud ## 36688 112 - Couronne d&#39;un grand p\\xf4le 0403 - L&#39;Ouest ## 36689 400 - Commune isol\\xe9e hors influence des p\\xf4les 0404 - Le Sud ## P14_POP P09_POP SUPERF NAIS0914 DECE0914 P14_MEN NAISD15 DECESD15 ## 36684 6722 6822 177.60 519 186 2322.000 94 43 ## 36685 22406 22437 57.84 1963 508 7686.912 358 100 ## 36686 7132 7406 103.82 661 235 2420.000 111 46 ## 36687 76796 72658 165.43 6663 2004 29662.460 1339 420 ## 36688 7198 7057 42.58 531 217 2484.887 104 54 ## 36689 5295 5989 84.40 430 186 2016.000 87 38 ## P14_LOG P14_RP P14_RSECOCC P14_LOGVAC P14_RP_PROP NBMENFISC13 ## 36684 2542.478 2322.000 28.58054 191.8979 1799.954 NA ## 36685 8328.616 7686.912 50.94097 590.7629 4450.648 NA ## 36686 2987.000 2420.000 174.00000 393.0000 1849.000 NA ## 36687 32710.091 29662.460 1004.31703 2043.3140 15372.921 NA ## 36688 2890.404 2484.887 67.58626 337.9313 1773.765 NA ## 36689 2732.690 2016.000 239.56501 477.1253 1522.480 NA ## PIMP13 MED13 TP6013 P14_EMPLT P14_EMPLT_SAL P09_EMPLT P14_POP1564 ## 36684 NA NA NA 1272.841 920.0617 1269.573 4306.217 ## 36685 NA NA NA 4296.362 3618.1538 4185.015 14821.042 ## 36686 NA NA NA 1519.306 1090.0856 1533.305 4650.000 ## 36687 NA NA NA 16145.620 12486.5465 14807.249 50316.640 ## 36688 NA NA NA 1273.858 994.3469 1202.079 4850.570 ## 36689 NA NA NA 1194.383 993.1546 1314.121 3461.457 ## P14_CHOM1564 P14_ACT1564 ETTOT14 ETAZ14 ETBE14 ETFZ14 ETGU14 ETGZ14 ## 36684 1250.516 2850.155 414 125 44 31 159 59 ## 36685 3712.486 10456.196 1323 136 139 190 694 249 ## 36686 1369.000 3108.000 490 148 29 43 214 73 ## 36687 12783.137 34446.789 5476 565 398 665 3025 999 ## 36688 1360.617 3524.287 456 42 39 61 223 76 ## 36689 1122.361 2415.666 360 49 17 35 193 49 ## ETOQ14 ETTEF114 ETTEFP1014 ## 36684 55 82 8 ## 36685 164 267 66 ## 36686 56 95 11 ## 36687 823 1032 204 ## 36688 91 59 20 ## 36689 66 65 26 str(df) ## &#39;data.frame&#39;: 36689 obs. of 38 variables: ## $ CODGEO : Factor w/ 36689 levels &quot;01001&quot;,&quot;01002&quot;,..: 1 2 3 4 5 6 7 8 9 10 ... ## $ LIBGEO : Factor w/ 34174 levels &quot;\\xc8ve&quot;,&quot;\\xc8vres&quot;,..: 13683 13685 813 815 832 855 859 954 1011 1173 ... ## $ REG : Factor w/ 17 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 15 15 15 15 15 15 15 15 15 15 ... ## $ DEP : Factor w/ 100 levels &quot;01&quot;,&quot;02&quot;,&quot;03&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ ZAU : Factor w/ 9 levels &quot;111 - Grand p\\xf4le (plus de 10 000 emplois)&quot;,..: 3 2 2 2 8 2 2 5 8 2 ... ## $ ZE : Factor w/ 321 levels &quot;0050 - Mont-de-Marsan&quot;,..: 260 248 248 260 263 248 248 263 266 250 ... ## $ P14_POP : int 767 239 14022 1627 109 2570 743 338 1142 397 ... ## $ P09_POP : int 787 207 13350 1592 120 2328 660 336 960 352 ... ## $ SUPERF : num 15.95 9.15 24.6 15.92 5.88 ... ## $ NAIS0914 : int 40 16 1051 117 8 175 59 12 56 25 ... ## $ DECE0914 : int 25 7 551 41 3 78 20 11 32 10 ... ## $ P14_MEN : num 306 99.3 6161.1 621.1 52.5 ... ## $ NAISD15 : int 13 5 222 15 2 21 11 2 18 4 ... ## $ DECESD15 : int 5 1 121 7 2 9 3 3 5 0 ... ## $ P14_LOG : num 342.7 161.2 6838.4 661.8 71.5 ... ## $ P14_RP : num 306 99.3 6161.1 621.1 52.5 ... ## $ P14_RSECOCC : num 14 47.3 121.6 10.9 10.9 ... ## $ P14_LOGVAC : num 22.74 14.55 555.64 29.85 8.14 ... ## $ P14_RP_PROP : num 260 84.6 2769 473.3 37.7 ... ## $ NBMENFISC13 : int 297 99 6034 617 47 1014 299 140 431 137 ... ## $ PIMP13 : num NA NA 57.4 NA NA ... ## $ MED13 : num 22130 23213 19554 22388 21872 ... ## $ TP6013 : num NA NA 15.1 NA NA ... ## $ P14_EMPLT : num 85.16 12.81 7452.93 280.57 5.95 ... ## $ P14_EMPLT_SAL: num 52.19 4.95 6743.37 206.38 3.96 ... ## $ P09_EMPLT : num 65.57 17.64 7551.68 286.61 5.29 ... ## $ P14_POP1564 : num 463 141.6 8962.8 1043.1 71.3 ... ## $ P14_CHOM1564 : num 33 9.84 1059.73 66.33 7.93 ... ## $ P14_ACT1564 : num 376 121 6681.9 842.1 57.5 ... ## $ ETTOT14 : int 47 22 1316 141 7 203 66 39 54 36 ... ## $ ETAZ14 : int 9 1 7 14 0 21 2 5 5 6 ... ## $ ETBE14 : int 2 3 60 7 0 18 0 2 6 4 ... ## $ ETFZ14 : int 5 1 131 19 0 21 9 1 13 3 ... ## $ ETGU14 : int 25 14 892 85 5 114 45 27 24 18 ... ## $ ETGZ14 : int 6 4 283 19 1 28 16 6 9 7 ... ## $ ETOQ14 : int 6 3 226 16 2 29 10 4 6 5 ... ## $ ETTEF114 : int 9 2 385 27 0 38 17 6 9 7 ... ## $ ETTEFP1014 : int 0 0 109 5 0 15 2 0 3 0 ... names(df) ## [1] &quot;CODGEO&quot; &quot;LIBGEO&quot; &quot;REG&quot; &quot;DEP&quot; ## [5] &quot;ZAU&quot; &quot;ZE&quot; &quot;P14_POP&quot; &quot;P09_POP&quot; ## [9] &quot;SUPERF&quot; &quot;NAIS0914&quot; &quot;DECE0914&quot; &quot;P14_MEN&quot; ## [13] &quot;NAISD15&quot; &quot;DECESD15&quot; &quot;P14_LOG&quot; &quot;P14_RP&quot; ## [17] &quot;P14_RSECOCC&quot; &quot;P14_LOGVAC&quot; &quot;P14_RP_PROP&quot; &quot;NBMENFISC13&quot; ## [21] &quot;PIMP13&quot; &quot;MED13&quot; &quot;TP6013&quot; &quot;P14_EMPLT&quot; ## [25] &quot;P14_EMPLT_SAL&quot; &quot;P09_EMPLT&quot; &quot;P14_POP1564&quot; &quot;P14_CHOM1564&quot; ## [29] &quot;P14_ACT1564&quot; &quot;ETTOT14&quot; &quot;ETAZ14&quot; &quot;ETBE14&quot; ## [33] &quot;ETFZ14&quot; &quot;ETGU14&quot; &quot;ETGZ14&quot; &quot;ETOQ14&quot; ## [37] &quot;ETTEF114&quot; &quot;ETTEFP1014&quot; class(df) ## [1] &quot;data.frame&quot; typeof(df) ## [1] &quot;list&quot; # Accéder a une variable directement (on obtient un vecteur) : df$CODGEO[1:10] # Captain crochet poweeeeerr !!! ## [1] 01001 01002 01004 01005 01006 01007 01008 01009 01010 01011 ## 36689 Levels: 01001 01002 01004 01005 01006 01007 01008 01009 01010 ... 97424 class(df$CODGEO) ## [1] &quot;factor&quot; typeof(df$CODGEO) ## [1] &quot;integer&quot; length(df) ## [1] 38 length(df$region) ## [1] 0 11.2.2 Créer, filtrer, sélectionner En utilisant la fonction mutate(), créer une nouvelle variable correspondant à la densité de population (rapport de la population à la superficie de la commune), ainsi que les taux de natalité et de mortalité (en pour mille) df &lt;- mutate(df,densite=P14_POP/SUPERF,tx_natal=1000*NAISD15/P14_POP,tx_mort=DECESD15/P14_POP) A l’aide de la fonction select(), créez une nouvelle table dans laquelle vous ne gardez que le code commune, le type de commune (ZAU), la région, le département et les variables que vous venez de créer. selection &lt;- select(df,CODGEO,ZAU,REG,DEP,densite,tx_natal,tx_mort) Enfin, ne retenez les communes correspondant à votre département de naissance et stocker. Faites attention au type de la variable département ! S0 &lt;- filter(selection,DEP==&quot;62&quot;) On va maintenant jouer avec les opérateurs logiques pour sélectionner des échantillons différents ! S1 &lt;- filter(selection,DEP!=&quot;62&quot;) # tout sauf le 62 :( S2 &lt;- filter(selection,DEP %in% c(&quot;59&quot;,&quot;62&quot;)) # L&#39;ancien NPdC :) S3 &lt;- filter(selection,!(DEP %in% c(&quot;59&quot;,&quot;62&quot;))) # Le &quot;sud&quot; de la France S4 &lt;- filter(selection,densite&gt;100) # l&#39;urbain S5 &lt;- filter(selection,DEP==&quot;62&quot; &amp; densite&gt;100) # le PdC urbain S6 &lt;- filter(selection, DEP==&quot;62&quot; | densite &gt; 100) # le PdC et l&#39;urbain Nom d’un pipe %&gt;% ! On peut combiner les opérations en une seule ligne à l’aide du pipe %&gt;% : selection &lt;- select(df,CODGEO,ZAU,REG,DEP,densite,tx_natal,tx_mort) %&gt;% filter(DEP==&quot;62&quot;) Le coin du capitaine [ ] Pour sélectionner les données, on peut également utiliser les crochets couplés aux dollars et aux c(), sans passer par les numéros de lignes et colonnes ! On rencontre assez souvent cette syntaxe sur les forums. selection &lt;- df[df$DEP==&quot;62&quot;,c(&quot;CODGEO&quot;,&quot;ZAU&quot;,&quot;REG&quot;,&quot;DEP&quot;,&quot;densite&quot;,&quot;tx_natal&quot;,&quot;tx_mort&quot;)] Note : dans la syntaxe tidyverse, on ne met pas (obligatoirement) de guillemets pour les noms de variable, alors qu’on le fait pour la version [ ] 11.3 Mes premiers graphiques et statistiques 11.3.1 Statistiques univariées Utilisez la fonction summary pour obtenir un résumé de l’ensemble des variables de la table df df &lt;- mutate(df,ZAU2=as.factor(substr(ZAU,1,3))) ### Parce que la variable originale est trop longue et caractères bizarres summary(df) ## CODGEO LIBGEO REG DEP ## 01001 : 1 Sainte-Colombe: 13 44 : 5198 62 : 895 ## 01002 : 1 Beaulieu : 11 76 : 4565 02 : 816 ## 01004 : 1 Saint-Sauveur : 11 75 : 4505 80 : 782 ## 01005 : 1 Sainte-Marie : 11 84 : 4189 76 : 745 ## 01006 : 1 Le Pin : 10 32 : 3838 57 : 730 ## 01007 : 1 Saint-Aubin : 10 27 : 3831 14 : 707 ## (Other):36683 (Other) :36623 (Other):10563 (Other):32014 ## ZAU ## 112 - Couronne d&#39;un grand p\\xf4le :12297 ## 400 - Commune isol\\xe9e hors influence des p\\xf4les: 7383 ## 300 - Autre commune multipolaris\\xe9e : 7021 ## 120 - Multipolaris\\xe9e des grandes aires urbaines : 3962 ## 111 - Grand p\\xf4le (plus de 10 000 emplois) : 3285 ## 221 - Petit p\\xf4le (de 1 500 \\xe0 5 000 emplois) : 888 ## (Other) : 1853 ## ZE P14_POP P09_POP ## 0061 - Toulouse : 717 Min. : 0 Min. : 0 ## 2307 - Rouen : 501 1st Qu.: 197 1st Qu.: 193 ## 2210 - Amiens : 479 Median : 444 Median : 431 ## 7310 - Tarbes - Lourdes: 455 Mean : 1838 Mean : 1793 ## 2102 - Troyes : 452 3rd Qu.: 1110 3rd Qu.: 1072 ## 2603 - Dijon : 448 Max. :2220445 Max. :2234105 ## (Other) :33637 NA&#39;s :821 NA&#39;s :821 ## SUPERF NAIS0914 DECE0914 ## Min. : 0.04 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 6.44 1st Qu.: 9.0 1st Qu.: 8.00 ## Median : 10.81 Median : 23.0 Median : 17.00 ## Mean : 17.64 Mean : 114.4 Mean : 77.35 ## 3rd Qu.: 18.58 3rd Qu.: 60.0 3rd Qu.: 43.00 ## Max. :18360.00 Max. :150843.0 Max. :69907.00 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_MEN NAISD15 DECESD15 ## Min. : 0.0 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 83.8 1st Qu.: 1.00 1st Qu.: 1.00 ## Median : 183.2 Median : 4.00 Median : 3.00 ## Mean : 802.0 Mean : 21.96 Mean : 16.47 ## 3rd Qu.: 454.9 3rd Qu.: 11.00 3rd Qu.: 9.00 ## Max. :1147990.9 Max. :28267.00 Max. :13997.00 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_LOG P14_RP P14_RSECOCC ## Min. : 0.0 Min. : 0.0 Min. : 0.00 ## 1st Qu.: 115.0 1st Qu.: 83.8 1st Qu.: 7.00 ## Median : 239.1 Median : 183.2 Median : 19.00 ## Mean : 970.2 Mean : 802.0 Mean : 91.63 ## 3rd Qu.: 565.0 3rd Qu.: 454.9 3rd Qu.: 49.29 ## Max. :1362181.9 Max. :1147990.9 Max. :107061.99 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :821 ## P14_LOGVAC P14_RP_PROP NBMENFISC13 ## Min. : 0.00 Min. : 0.0 Min. : 32.0 ## 1st Qu.: 8.00 1st Qu.: 68.4 1st Qu.: 102.0 ## Median : 18.00 Median : 148.0 Median : 205.0 ## Mean : 76.60 Mean : 462.2 Mean : 809.7 ## 3rd Qu.: 43.75 3rd Qu.: 349.2 3rd Qu.: 484.0 ## Max. :107129.02 Max. :381934.3 Max. :1038789.0 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :3793 ## PIMP13 MED13 TP6013 P14_EMPLT ## Min. :24.46 Min. :10021 Min. : 5.00 Min. : 0.0 ## 1st Qu.:50.57 1st Qu.:18452 1st Qu.: 8.73 1st Qu.: 26.0 ## Median :58.40 Median :19844 Median :11.97 Median : 66.8 ## Mean :58.98 Mean :20250 Mean :13.35 Mean : 733.9 ## 3rd Qu.:67.19 3rd Qu.:21563 3rd Qu.:16.80 3rd Qu.: 229.5 ## Max. :89.38 Max. :46251 Max. :44.84 Max. :1801865.8 ## NA&#39;s :31598 NA&#39;s :3793 NA&#39;s :32531 NA&#39;s :821 ## P14_EMPLT_SAL P09_EMPLT P14_POP1564 ## Min. : 0.0 Min. : 0.0 Min. : 0.0 ## 1st Qu.: 13.0 1st Qu.: 26.1 1st Qu.: 120.3 ## Median : 42.0 Median : 65.2 Median : 275.0 ## Mean : 637.8 Mean : 716.4 Mean : 1165.0 ## 3rd Qu.: 173.4 3rd Qu.: 220.6 3rd Qu.: 684.8 ## Max. :1562078.5 Max. :1805470.4 Max. :1554076.1 ## NA&#39;s :821 NA&#39;s :9 NA&#39;s :821 ## P14_CHOM1564 P14_ACT1564 ETTOT14 ## Min. : 0.00 Min. : 0.0 Min. : 0.0 ## 1st Qu.: 8.85 1st Qu.: 90.5 1st Qu.: 19.0 ## Median : 20.45 Median : 208.3 Median : 38.0 ## Mean : 119.75 Mean : 855.8 Mean : 179.3 ## 3rd Qu.: 51.78 3rd Qu.: 518.0 3rd Qu.: 92.0 ## Max. :144515.41 Max. :1202565.3 Max. :551952.0 ## NA&#39;s :821 NA&#39;s :821 NA&#39;s :25 ## ETAZ14 ETBE14 ETFZ14 ## Min. : 0.00 Min. : 0.000 Min. : 0.00 ## 1st Qu.: 4.00 1st Qu.: 1.000 1st Qu.: 2.00 ## Median : 7.00 Median : 3.000 Median : 5.00 ## Mean : 11.36 Mean : 9.417 Mean : 18.18 ## 3rd Qu.: 14.00 3rd Qu.: 7.000 3rd Qu.: 12.00 ## Max. :587.00 Max. :15181.000 Max. :24528.00 ## NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 ## ETGU14 ETGZ14 ETOQ14 ## Min. : 0.0 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 7.0 1st Qu.: 1.00 1st Qu.: 2.00 ## Median : 17.0 Median : 4.00 Median : 4.00 ## Mean : 116.1 Mean : 28.73 Mean : 24.22 ## 3rd Qu.: 47.0 3rd Qu.: 13.00 3rd Qu.: 10.00 ## Max. :462763.0 Max. :65004.00 Max. :48893.00 ## NA&#39;s :25 NA&#39;s :25 NA&#39;s :25 ## ETTEF114 ETTEFP1014 densite ## Min. : 0.00 Min. : 0.00 Min. : 0.00 ## 1st Qu.: 4.00 1st Qu.: 0.00 1st Qu.: 18.59 ## Median : 8.00 Median : 1.00 Median : 40.35 ## Mean : 41.33 Mean : 10.28 Mean : 160.15 ## 3rd Qu.: 19.00 3rd Qu.: 4.00 3rd Qu.: 94.57 ## Max. :124131.00 Max. :24527.00 Max. :27126.14 ## NA&#39;s :25 NA&#39;s :25 NA&#39;s :821 ## tx_natal tx_mort ZAU2 ## Min. : 0.000 Min. :0.0000 112 :12297 ## 1st Qu.: 5.679 1st Qu.:0.0044 400 : 7383 ## Median : 9.264 Median :0.0079 300 : 7021 ## Mean : 9.699 Mean :0.0093 120 : 3962 ## 3rd Qu.: 12.931 3rd Qu.:0.0124 111 : 3285 ## Max. :111.111 Max. :0.1577 221 : 888 ## NA&#39;s :827 NA&#39;s :827 (Other): 1853 Calculez maintenant les moyenne, médiane, écart-type et variance de la variable de densité de population mean(df$densite) ## [1] NA sd(df$densite) ## [1] NA median(df$densite) ## [1] NA var(df$densite) ## [1] NA Il y a des valeurs manquantes, qui sont absorbantes ! On ajoute un paramètre pour calculer uniquement sur les valeurs renseignées mean(df$densite,na.rm = T) ## [1] 160.151 sd(df$densite,na.rm = T) ## [1] 722.799 median(df$densite,na.rm = T) ## [1] 40.35457 var(df$densite,na.rm = T) ## [1] 522438.4 Application : calculez la version centrée réduite de la variable de densité. Rappel : on calcule la version centrée réduite d’une variable X en lui appliquant la transformation suivante : \\[ STD_X = \\dfrac{X-\\bar{X}}{\\sigma_X}\\] où \\(\\bar{X}\\) est la moyenne empirique de X et \\(\\sigma_X\\) son écart-type Avantage : on élimine les effets d’unité (d’ordre de grandeur) df &lt;- mutate(df,std_dens=(densite-mean(densite,na.rm = T))/sd(densite,na.rm = T)) mean(df$std_dens,na.rm = T) ## [1] 9.482279e-18 sd(df$std_dens, na.rm = T) ## [1] 1 Calulez à présent les quartiles puis déciles de cette variables quantile(df$densite,na.rm = T) ## 0% 25% 50% 75% 100% ## 0.00000 18.59047 40.35457 94.57430 27126.14108 quantile(df$densite,probs = seq(0,1,.1),na.rm = T) ## 0% 10% 20% 30% 40% 50% ## 0.00000 10.03439 15.65357 21.84208 29.76144 40.35457 ## 60% 70% 80% 90% 100% ## 54.82089 77.65199 119.08740 240.40789 27126.14108 11.3.2 Tableaux croisés Une variable Calculez le nombre de communes par type d’espace à l’aide de la fonction table, et le pourcentage associé t &lt;- table(df$ZAU2) t ## ## 111 112 120 211 212 221 222 300 400 ## 3285 12297 3962 456 815 888 582 7021 7383 100*prop.table(t) %&gt;% round(digits = 4) ## ## 111 112 120 211 212 221 222 300 400 ## 8.95 33.52 10.80 1.24 2.22 2.42 1.59 19.14 20.12 Deux variables t &lt;- table(df$REG,df$ZAU2) t ## ## 111 112 120 211 212 221 222 300 400 ## 01 17 6 1 0 0 3 0 2 3 ## 02 16 0 4 3 0 2 0 4 5 ## 03 3 3 0 2 0 1 0 0 13 ## 04 10 3 4 2 0 0 0 1 4 ## 11 413 853 3 3 2 0 0 7 0 ## 24 103 734 188 30 72 46 19 375 275 ## 27 140 1299 336 31 122 60 137 737 969 ## 28 216 1126 488 34 104 78 29 762 396 ## 32 481 1505 729 33 18 54 18 711 289 ## 44 322 1721 822 54 102 89 118 1155 815 ## 52 108 535 186 23 44 69 8 386 143 ## 53 89 415 152 47 18 42 1 325 181 ## 75 333 1161 254 51 81 163 81 1002 1379 ## 76 258 1124 333 79 155 123 89 877 1527 ## 84 548 1484 390 43 84 113 47 517 963 ## 93 220 229 69 20 11 32 6 107 269 ## 94 8 99 3 1 2 13 29 53 152 100*prop.table(t) %&gt;% round(digits = 4) ## ## 111 112 120 211 212 221 222 300 400 ## 01 0.05 0.02 0.00 0.00 0.00 0.01 0.00 0.01 0.01 ## 02 0.04 0.00 0.01 0.01 0.00 0.01 0.00 0.01 0.01 ## 03 0.01 0.01 0.00 0.01 0.00 0.00 0.00 0.00 0.04 ## 04 0.03 0.01 0.01 0.01 0.00 0.00 0.00 0.00 0.01 ## 11 1.13 2.32 0.01 0.01 0.01 0.00 0.00 0.02 0.00 ## 24 0.28 2.00 0.51 0.08 0.20 0.13 0.05 1.02 0.75 ## 27 0.38 3.54 0.92 0.08 0.33 0.16 0.37 2.01 2.64 ## 28 0.59 3.07 1.33 0.09 0.28 0.21 0.08 2.08 1.08 ## 32 1.31 4.10 1.99 0.09 0.05 0.15 0.05 1.94 0.79 ## 44 0.88 4.69 2.24 0.15 0.28 0.24 0.32 3.15 2.22 ## 52 0.29 1.46 0.51 0.06 0.12 0.19 0.02 1.05 0.39 ## 53 0.24 1.13 0.41 0.13 0.05 0.11 0.00 0.89 0.49 ## 75 0.91 3.16 0.69 0.14 0.22 0.44 0.22 2.73 3.76 ## 76 0.70 3.06 0.91 0.22 0.42 0.34 0.24 2.39 4.16 ## 84 1.49 4.04 1.06 0.12 0.23 0.31 0.13 1.41 2.62 ## 93 0.60 0.62 0.19 0.05 0.03 0.09 0.02 0.29 0.73 ## 94 0.02 0.27 0.01 0.00 0.01 0.04 0.08 0.14 0.41 Pour aller plus loin et ajouter des variables de pondération, calculer les profils-ligne ou profils-colonne, rendez-vous au module 3, ou demandez à votre GF (Gentil Formateur) 11.3.3 Les graphiques avec ggplot2 On reprend la base non filtrée. A l’aide de la cheat sheet ggplot2, réalisez un histogramme de la densite de population. ggplot(data = df,aes(x=densite)) + geom_histogram() Ce n’est pas très informatif, mais on peut faire une transformation log pour y voir plus clair ! ggplot(data = df,aes(x=log(densite))) + geom_histogram() Faites maintenant un barplot (qui n’est pas un histogramme !!!! ) du nombre de communes par type ZAU ggplot(data=df,aes(x=ZAU)) + geom_bar() On va essayer d’y voir plus clair avec le paramètre fill ggplot(data=df,aes(x=ZAU2,fill=ZAU2)) + geom_bar() Réalisez un graphique (unage de points) croisant la densité de population et le taux de mortalité ggplot(data=df,aes(x=densite,y=tx_mort)) + geom_point() On peut ajouter une dimension supplémentaire avec la couleur des points ggplot(data=df,aes(x=densite,y=tx_mort,color=ZAU2)) + geom_point() Là encore il faudrait faire une transformation logarithmique, mais tout ça est abordé dans le module 3 ! Avec les fonctions de base, on peut obtenir de nombreux graphiques avec très peu de code, mais moins jolis : plot(iris) Des possibilités infinies à approfondir dans les modules 3 et 5 !!!!! "],
["exercices-pour-r-studio.html", "Chapitre 12 Exercices pour R Studio 12.1 Exercice 1 : Prendre en main RStudio (10 min.) 12.2 Exercice 2 : Faire ses premiers calculs (15 min.) 12.3 Exercice 3 : Créer ses premières variables (15 min.) 12.4 Exercice 4 : Créer son premier script (20 min.)", " Chapitre 12 Exercices pour R Studio 12.1 Exercice 1 : Prendre en main RStudio (10 min.) Depuis le gestionnaire de fichier de RStudio (panneau bas-droite), vous allez créer un dossier qui va servir de dossier de travail au cours de la formation. Pour cela : utilisez le bouton New folder (expl. Formation_R). Pour définir ce dossier comme répertoire de travail de R, sélectionnez-le et allez dans le menu More/Set as working directory. Regardez ce qui se passe dans la console (panneau bas gauche). Qu’est-ce que cela signifie ? Si vous voulez avoir plus de renseignements sur la fonction setwd, vous pouvez utiliser l’aide en ligne de R en écrivant ?setwd ou help(setwd) dans la console. Qu’est ce passe-t-il ? Dans l’onglet Help de RStudio, vous pouvez également faire une recherche à partir du moteur de recherche. Essayez d’obtenir des informations sur la fonction dir(). 12.2 Exercice 2 : Faire ses premiers calculs (15 min.) Dans la console, faite des calculs simples : 2 + 3, 5 * 4, 5 + (6 * 4), 2.5 * 1.3, 3**3 Que se passe-t-il lorsque vous écrivez pi dans la console ? Qu’est-ce que cela signifie ? Calculez maintenant cos(pi) et sin(pi/2). Que voyez-vous apparaître au moment où vous écrivez ces fonctions ? Faites maintenant la moyenne des nombres : 4, 5, 2, 1. Avez-vous utilisé un calcul ou une fonction de R ? Calculez la valeur absolue de l’opération 2 – 6. Calculez maintenant round(2.125412). Que voyez-vous ? Comment pouvez-vous faire pour faire un arrondi de 2.125412 à deux chiffres après la virgule (vous pouvez utiliser l’aide de R). Que se passe-t-il lorsque vous manipulez les flèches haut et bas depuis la console ? 12.3 Exercice 3 : Créer ses premières variables (15 min.) Dans la console, créer deux variables numériques a et b de valeur 5 et 4 par assignation : a&lt;-5 et b&lt;-4 Que se passe-t-il dans le panneau Environement (en haut à droite) ? Faites maintenant un calcul avec ces variables comme a+b et a*b. Vous allez ensuite créer une troisième variable à partir d’un calcul sur les deux premières : c&lt;-a+3*b Vous pouvez afficher la liste des variables avec la fonction ls(). Modifiez maintenant la valeur de a en lui donnant la valeur 10. Vérifiez votre ré-assignation dans la panneau Environement. Créez une variable chaîne de caractère : t&lt;-'texte' (vous pouvez également utiliser les doubles quotes comme “texte” mais ne les mélangez pas). Concaténez (mettez bout à bout) a et t avec la fonction paste(a,t). Que constatez-vous ? Pour plus de renseignements sur la fonction paste(), pensez à utiliser l’aide de R avec help(paste). Créez maintenant les variables A&lt;-15 et B&lt;-12. Que voyez-vous dans la panneau Environement ? Vous pouvez supprimer la variables A et B en utilisant la fonction rm() (utilisez l’aide de R pour avoir plus de renseignements sur la fonction rm). 12.4 Exercice 4 : Créer son premier script (20 min.) Depuis le panneau d’édition de script de RStudio (en haut à gauche), vous allez créer un script ré-utilisable permettant de calculer l’indice de masse corporelle d’un individu (IMC) et d’afficher le résultat dans la console sous la forme d’un phrase explicite. L’IMC est calculé par la masse sur la taille au carré d’un individu (\\(masse / taille^2\\)). Quelques petits conseils : de façon générale, n’hésitez pas à commenter votre script pour vous aider à le comprendre lorsque vous serez amené à le reprendre, pensez à bien assigner vos variables poids et taille pour une meilleure ré-utilisabilité du script, la fonction print() permet d’afficher une chaîne de caractères dans la console, pensez à arrondir le résultat de votre calcul d’IMC. Enregistrez ensuite votre script dans votre répertoire de travail. L’extension d’un fichier script pour R est .R. "]
]
